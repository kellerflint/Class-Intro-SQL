{"/":{"title":"Main Page","content":"\n\nHi, testing\n\n[[Test Page]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/DONT-FORGET":{"title":"DONT FORGET!","content":"\n\n\nBefore recording - zoom to 150% and collapse bookmarks.\n\n\nTODO:\n- Video on Canvas explaining this weeks lessons\n- LinkedIn Learning videos\n- Link obsidian in canvas\n- Add videos for each section (except last two probably don't need it. But do one for how to submit the assignment, include creating .sql file in vs code).\n- Add quiz. Maybe remove stupid questions though. Or make them just a single fill in the blank instead of multiple.\n\nUsing the backticks\n\nDidn't cover unique either, need to do that later.\n\nShould be in a handling null's section somewhere. \n- `IS NULL`: Returns true if a value is NULL.\n- `IS NOT NULL`: Returns true if a value is not NULL.\nTechnically these are comparison operators I believe but I don't want to deal with them in week 2.","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Select-and-Filter-Data-Creating-a-Database":{"title":"Select and Filter Data - Creating a Database","content":"# Select and Filter Data - Creating a Database\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=03277e59-0052-4bd5-afbe-b08f01438c9e\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nBack: [[Select and Filter Data - Introduction]] | Next: [[Select and Filter Data - Running Scripts]]\n","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Select-and-Filter-Data-Introduction":{"title":"Select and Filter Data - Introduction","content":"# Select and Filter Data - Introduction\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=099d37f5-9a86-4ea6-95b8-b0f20177b4ed\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nIn this section, we'll cover key SQL concepts to help you retrieve, filter and sort the information in your databases. We will cover using the SELECT statement to pick out the specific columns we're interested in. We'll learn to filter which rows we get using the WHERE clause and explore more some of the logic that can help us find exactly what we're looking for. Last, we'll understand how to sort our data using the ORDER BY clause.\n\nAs you progress through the lessons, make sure to solve the practice questions in your own database. Be sure to save all your queries to a file on your computer. You will need to submit them as part of your weekly assignment.\n\nBefore getting started you'll want to make sure that you have a text or code editor installed. You will need this to write SQL scripts. I'd recommend \u003ca href=\"https://code.visualstudio.com/\" target=\"_blank\"\u003eVisual Studio Code\u003c/a\u003e but you can use whatever software you'd like.\n\nNext: [[Select and Filter Data - Creating a Database]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Select-and-Filter-Data-Logical-Operators":{"title":"Select and Filter Data - Logical Operators","content":"# Select and Filter Data - Logical Operators\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1d1412b2-7cca-43cf-af61-b0f20177942c\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nLogical operators are essential in SQL for combining multiple conditions in the WHERE clause and adding flexibility to your queries. With the right operators, you can filter for rows based on any combination of attributes and conditions.\n\nSome of the most commonly used logical operators used in SQL are:\n- `AND`: Returns true if both conditions are true.\n- `OR`: Returns true if at least one of the conditions is true.\n- `NOT`: Negates the condition, returning true if the condition is false.\n- `BETWEEN`: Returns true if a value lies within a specified range.\n- `IN`: Returns true if a value matches any value in a list.\n- `LIKE`: Returns true if a value matches a specified pattern.\n\nExpanding on the `Employees` table from our previous examples:\n\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 1 | John Doe | 28 | Marketing |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n| 4 | Sara Ali | 30 | Finance |\n| 5 | Mia Chen | 26 | Marketing |\n\nTo find employees over 30 years old in the IT department we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Age \u003e 30 AND Department = 'IT';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|3|Alex Ray|45|IT|\n\nAs 'Alex Ray' is the only employee who matches both criteria.\n\nAlternatively if we wanted to find employees who are either in the 'HR' departments OR over 30 years old we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Age \u003e 30 OR Department = 'IT';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|2|Jane Doe|32|HR|\n|3|Alex Ray|45|IT|\n\nBecause while 'Jane Doe' is not in the 'IT' department, she is older than 30 and only one condition needs to be met.\n\nTo find all employees who are between the ages of 20 and 30 we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Age BETWEEN 20 AND 30;\n```\n##### Expected Output: \n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 1 | John Doe | 28 | Marketing |\n| 4 | Sara Ali | 30 | Finance |\n| 5 | Mia Chen | 26 | Marketing |\n\nThis time the expected output includes Sara Ali because `BETWEEN` is inclusive meaning we'll also get employees who are equal to the thresholds.\n\nTo find employees who work in either 'Marketing', 'Finance', or 'IT' departments we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Department IN ('Marketing', 'Finance', 'IT');\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n|5|Mia Chen|26|Marketing|\n\nThe `LIKE` command is slightly more complicated. It can be used to find values that match a particular pattern a pattern. For example if we wanted to find employees whose names started the letter 'J' we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Name LIKE 'J%';\n```\n##### Expected Output:\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 1 | John Doe | 28 | Marketing |\n| 2 | Jane Doe | 32 | HR |\n\nThe `%` symbol after the 'J' is a wildcard that represents zero, one, or multiple characters. So this pattern is looking for Names that start with a 'J' followed by any number of any characters (or none at all).\n\n`Like` can allow you to match any pattern with the right wildcards. See \u003ca href=\"https://www.w3schools.com/sql/sql_wildcards.asp\" target=\"_blank\"\u003eSQL Wildcard Characters (w3schools.com)\u003c/a\u003e for more information on Wildcards.\n\n# Practice Questions\n\n4. Write a query to select all customers who are from 'Berlin', 'London', 'Vancouver', 'SÃ£o Paulo' or 'Madrid'.\n\n5. Write a query to select all customers who are not from 'Germany' and whose contact ages are under 60 years old.\n\n6. Write a query to select all customers whose contact ages are between 25 and 35 and whose contact name starts with an 'Al'.\n\nBack: [[Select and Filter Data - WHERE Clause and Comparison Operators]] | Next: [[Select and Filter Data - ORDER BY]]\n","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Select-and-Filter-Data-Note-on-Semicolons":{"title":"Select and Filter Data - Note on Semicolons","content":"# Select and Filter Data - Note on Semicolons\n\n### Why use semicolons?\n\nSo far we've only been executing a single query at a time but we could run more. A single query does not generally require a semicolon. However when you have multiple SQL statements in a script a semicolon is used to separate each statement. This prevents confusion for SQL about where one statement ends and the next begins.\n\nUsing semicolons is considered a best practice even when they are not strictly required and I will be expecting you to use them in your work for this course.\n\nBack: [[Select and Filter Data - SQL Comments]] | Next: [[Select and Filter Data - Practice Assignment]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Select-and-Filter-Data-ORDER-BY":{"title":"Select and Filter Data - ORDER BY","content":"# Select and Filter Data - ORDER BY\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1304790b-0894-4c02-90b6-b0f2017793fc\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nThe `ORDER BY` clause is used to sort the result set of a query by one or more columns. It can sort the data in ascending or descending order. By default, it sorts in ascending order. \n\n`ORDER BY` must come after the WHERE clause. This makes sense if we think about it, we do not want to sort the rows until we've already filtered out the ones we don't want.\n\nUsing the `Employees` table from the previous example:\n\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|2|Jane Doe|32|HR|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n|5|Mia Chen|26|Marketing|\n\nWe can sort the results by columns such as age with:\n\n```sql\nSELECT * FROM Employees\nORDER BY Age;\n```\n##### Expected Output\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 5 | Mia Chen | 26 | Marketing |\n| 1 | John Doe | 28 | Marketing |\n| 4 | Sara Ali | 30 | Finance |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n\nIf we instead wrote:\n\n```sql\nSELECT * FROM Employees\nORDER BY Age DESC;\n```\n\nWe would get the same list but sorted from the highest to lowest age.\n\nIt is also possible to `ORDER BY` multiple columns:\n\n```sql\nSELECT * FROM Employees\nORDER BY Department, Age;\n```\n##### Expected Output:\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 4 | Sara Ali | 30 | Finance |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n| 5 | Mia Chen | 26 | Marketing |\n| 1 | John Doe | 28 | Marketing |\n\nIn this ordered list, employees are sorted by their departments ('Finance', 'HR', 'IT', and 'Marketing'), and within each department, they are sorted by their age from youngest to oldest.\n\n# Practice Questions\n\n7. Write a query to select all customers and order them alphabetically by the customer name.\n\n8. Write a query to select all customers and order them by their Ids from highest to lowest.\n\nBack: [[Select and Filter Data - Logical Operators]] | Next: [[Select and Filter Data - SQL Comments]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Select-and-Filter-Data-Practice-Assignment":{"title":"Select and Filter Data - Practice Assignment","content":"# Select and Filter Data - Practice Assignment\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=301026b3-0fb6-4a0b-abc9-b0f2017793d2\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nIn addition to the practice problems from the lesson pages, write queries to do the following:\n\n9. Select customers who are not from 'Berlin' or 'London' and are younger than 50. Order the results by age in descending order.\n\n10. Select customers whose customer name starts with an 'L' or an 'M'. Order the results by Id in descending order.\n\n### Submission Instructions\n\nPlease put all SQL queries for the practice questions into a single SQL file. Use comments to label each query with its respective question number. Submit this .sql file for your assignment on Canvas.\n\nBack: [[Select and Filter Data - Note on Semicolons]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Select-and-Filter-Data-Running-Scripts":{"title":"Select and Filter Data - Running Scripts","content":"# Select and Filter Data - Running Scripts\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=3b6bc768-5330-4f2b-9f42-b0f20177a502\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nTo get started with hands-on practice, you'll need data to populate your database. We'll do this by running a SQL script. Follow these steps to execute the script on your database:\n\n1. **Open the SQL File**:\n    - Open the script file \u003ca href=\"https://github.com/kellerflint/Class-Intro-SQL/blob/hugo/content/Files/CustomerScript.sql\" target=\"_blank\"\u003eCustomerScript.sql (github.com)\u003c/a\u003e. It contains the commands to create tables and insert data into them.\n2. **Access phpMyAdmin**:\n    - From the WebHostingForStudents Client Area, find your website and click the \"Log in to cPanel\" button.\n    - Once in cPanel, click \"phpMyAdmin\" under the \"Databases\" section.\n3. **Connect to Your Database**:\n    - Make sure you're connected to the database that you want to run the script on. In this case, it will be the database you created for this class. In phpMyAdmin you can select the database by clicking on its name on the left side of the screen.\n4. **Run the Script**:\n    - To run SQL code, click the \"SQL\" tab in the horizontal menu at the top of the screen.\n    - Copy over the entire contents of the SQL script into the editor. \n    - Click the \"Go\" button at the bottom right. This will create the tables defined in the script and populate them with data.\n5. **Verify the Data**:\n    - After running the script, check to ensure that tables are created and data is inserted. You can do this by running a simple SELECT query, like `SELECT * FROM tablename;.\n\nBack: [[Select and Filter Data - Creating a Database]] | Next: [[Select and Filter Data - SELECT Statement]] ","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Select-and-Filter-Data-SELECT-Statement":{"title":"Select and Filter Data - SELECT Statement","content":"# Select and Filter Data - SELECT Statement\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=aa477a38-2f05-4bf1-9aaf-b0f201779f3c\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## Database Basics Refresher\n\nDatabases exist to help us store and manage large amounts of information in an organized way. In SQL this data is organized into tables consisting of rows and columns. Each table in a database represents a different entity, such as customers, products, or orders. The rows in the table represent individual records, and the columns represent the attributes of these entities.\n##### Example Table: Customers\n| CustomerID | FirstName | LastName | Email               |\n|------------|-----------|----------|---------------------|\n| 1          | John      | Doe      | johndoe@email.com   |\n| 2          | Jane      | Smith    | janesmith@email.com |\n| 3          | Alex      | Johnson  | alexj@email.com     |\n\n## SELECT Statements\n\nThe `SELECT` statement is used to retrieve data from a database. It allows you to specify exactly which data you want to fetch from a table.\n\n##### Basic SELECT Syntax\n\n```sql\nSELECT column1, column2, ...\nFROM table_name;\n```\n\n##### Selecting Specific Columns\n\nTo retrieve specific columns from a table, list the column names separated by commas. For example the query:\n\n```sql\nSELECT FirstName, LastName\nFROM Customers;\n```\n##### Expected Output:\n| FirstName | LastName |\n| ---- | ---- |\n| John | Doe |\n| Jane | Smith |\n| Alex | Johnson |\n##### Selecting All Columns\n\nTo select all columns from a table, use the asterisk `*` symbol:\n\n```sql\nSELECT *\nFROM Customers;\n```\n\nThis query will result in the entire Customers table being displayed.\n\n# Practice Questions\n\n1. Select only the contact's name and age columns from the Customer table.\n\nBack: [[Select and Filter Data - Running Scripts]] | Next: [[Select and Filter Data - WHERE Clause and Comparison Operators]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Select-and-Filter-Data-SQL-Comments":{"title":"Select and Filter Data - SQL Comments","content":"# Select and Filter Data - SQL Comments\n\nComments in SQL are used to explain sections of SQL statements, or to prevent execution of SQL statements. They are helpful for documentation purposes and making code more readable.\n\n## Types of Comments:\n\n#### Single-Line Comments\n\n```sql\n-- This is a single-line comment\nSELECT * FROM Employees;\n```\n#### Multi-Line Comments:\n\n```sql\n/* This is a multi-line comment\n   that covers multiple lines */\nSELECT * FROM Employees;\n\n```\n\nComments are a crucial part of writing maintainable, understandable SQL code, especially in complex queries or when working in teams. They allow you to explain why a certain SQL statement is used, or to temporarily disable parts of SQL code during testing and development.\n\nBack: [[Select and Filter Data - ORDER BY]] | Next: [[Select and Filter Data - Note on Semicolons]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Select-and-Filter-Data-WHERE-Clause-and-Comparison-Operators":{"title":"Select and Filter Data - WHERE Clause and Comparison Operators","content":"# Select and Filter Data - WHERE Clause and Comparison Operators\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=10ae282e-3ce2-4f40-81b7-b0f201779467\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nThe WHERE clause in SQL is used to filter records from a table, returning only those that meet a specific condition. \n### Basics of the WHERE Clause \n\nThe WHERE clause follows the syntax: \n\n```sql\nSELECT column1, column2, ... FROM table_name \nWHERE condition;\n```\n\n### Comparison Operators\n\nThere are many different types of operators that can be used in our condition to filter what rows we get back based on the data they contain.\n\nThe first type are the comparison operators. These are used to compare values in a column with other values or expressions. These include:\n- `=` : Equal to\n- `\u003c` `\u003e` or `!` `=` : Not equal to\n- `\u003e` : Greater than\n- `\u003c` : Less than\n- `\u003e` `=` : Greater than or equal to\n- `\u003c` `=` : Less than or equal to\n\nFor example, assume we have a table `Employees` with the following data:\n\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|2|Jane Doe|32|HR|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n\nTo get details of employees from the 'Marketing' department we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Department = 'Marketing';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n\nIf we wanted to find all employees who are not in the 'HR' department we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Department \u003c\u003e 'HR';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n\nIf we wanted to see information for employees over the age of 30 we could write:\n\n```sql\nSELECT * FROM Employees \nWHERE Age \u003e 30;\n```\n##### Expected Output:\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n# Practice Questions\n\n2. Write a query to select all customers who are from 'Germany'.\n\n3. Write a query to select all customers whose contact age is less than or equal to 20.\n\nBack: [[Select and Filter Data - SELECT Statement]] | Next: [[Select and Filter Data - Logical Operators]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Table-JOINs-DROP-Tables-and-Run-Script":{"title":"Table JOINs - DROP Tables and Run Script","content":"\n# Table JOINs - DROP Tables and Run Script\n\nVideo Embedding - need to tell them how to drop old stuff first.\n\nRun the following script on your database once dropped - link it here.\n\n\n\n\nBack: [[Table JOINs - Introduction]] | Next: [[Table JOINs - One to Many Relationships]]\n","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Table-JOINs-Filter-and-Sort-with-JOINs":{"title":"Table JOINs - Filter and Sort with JOINs","content":"# Table JOINs - Filter and Sort with JOINs\n\nVideo Embed\n\n## Using WHERE and ORDER BY with JOINs\n\nWe can still utilize the clauses from previous lessons to filter and sort on joined data. \n\nFor this example we'll use the `Authors` and `Books` tables with a one to many relationship. Each author can write multiple books, but each book has only one author.\n### Authors Table:\n|AuthorID|AuthorName|\n|---|---|\n|1|J.K. Rowling|\n|2|George Orwell|\n|3|Leo Tolstoy|\n### Books Table:\n| BookID | Title | AuthorID |\n| ---- | ---- | ---- |\n| 101 | Harry Potter | 1 |\n| 102 | 1984 | 2 |\n| 103 | Animal Farm | 2 |\n| 104 | War and Peace | 3 |\n| 105 | Anna Karenina | 3 |\n### SQL JOIN with Filter and Sort\n\nCreate a query that joins these tables and:\n1. Filters to show only books written by a specific author (e.g., George Orwell).\n2. Sorts the results by the book's title.\n\n```sql\nSELECT Books.Title, Authors.AuthorName FROM Books\nJOIN Authors ON Books.AuthorID = Authors.AuthorID\nWHERE Authors.AuthorName = 'George Orwell'\nORDER BY Books.Title;\n\n```\n##### Expected Output:\n|Title|AuthorName|\n|---|---|\n|Anna Karenina|Leo Tolstoy|\n|War and Peace|Leo Tolstoy|\n### Explanation:\n\n1. **SELECT Clause**: Retrieves the book titles and their corresponding author names.\n2. **JOIN Operation**: Joins the `Books` and `Authors` tables using the `AuthorID` as the common field.\n3. **WHERE Clause**: Filters the results to include only those books written by 'Leo Tolstoy'.\n4. **ORDER BY Clause**: Sorts the resulting list of books by their titles in ascending order.\n\n`JOIN` must come before our `WHERE` and `ORDER BY` clauses because we need to have the `AuthorName` and `Title` in order to filter and sort them.\n\n\n\nBack: [[Table JOINs - JOIN Tables with Many to Many Relationships]] | Next: [[Table JOINs - Table Aliasing]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Table-JOINs-Introduction":{"title":"Table JOINs - Introduction","content":"# Table JOINs - Introduction\n\nVideo Embed\n\nIn this section, we will:\n- Interact with databases that have multiple related tables.\n- Discuss the different types of relationships tables can have with each other and how these relationships shape the way we retrieve and interpret data. \n- Explore the commands used to combine information from different tables, filter it based on specific criteria, and order it to get the results we want.\n\nNext: [[Table JOINs - DROP Tables and Run Script]]\n","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Table-JOINs-JOIN-Tables-with-Many-to-Many-Relationships":{"title":"Table JOINs - JOIN Tables with Many to Many Relationships","content":"# Table JOINs - JOIN Tables with Many to Many Relationships\n\nEmbed Video\n\n## Understanding JOINs in Many to Many Relationships\n\nGiven our bookstore database example from the previous lesson:\n### Authors Table:\n|AuthorID|AuthorName|\n|---|---|\n|1|Luna Bellatrix|\n|2|Orion Stardust|\n|3|Celeste Moon |\n### Books Table:\n|BookID|Title|\n|---|---|\n|101|Whispers of the Galaxy|\n|102|Secrets of the Eclipse|\n|103|Shadows in the Cosmos|\n|104|Starlight Symphony|\n|105|Moonlit Myth|\n### BooksAuthors Joining Table:\n|BookID|AuthorID|\n|---|---|\n|101|1|\n|102|2|\n|103|2|\n|103|1|\n|104|3|\n|105|3|\nTo retrieve data that spans across these three tables, we use the SQL JOIN operation twice. Let's see how we can use the JOIN command to fetch the list of books along with their authors' names now that we're representing the data with a many to many relationship.\n### Understanding the Many to Many Relationship\n\n```sql\nSELECT Books.Title, Authors.AuthorName FROM Books\nJOIN BooksAuthors ON Books.BookID = BooksAuthors.BookID\nJOIN Authors ON BooksAuthors.AuthorID = Authors.AuthorID;\n```\n##### Expected Output:\n|Title|AuthorName|\n|---|---|\n|Whispers of the Galaxy|Luna Bellatrix|\n|Secrets of the Eclipse|Orion Stardust|\n|Shadows in the Cosmos|Orion Stardust|\n|Shadows in the Cosmos|Luna Bellatrix|\n|Starlight Symphony|Celeste Moon |\n|Moonlit Myth|Celeste Moon |\n#### 1. `SELECT Books.Title, Authors.AuthorName FROM Books`\n- This command retrieves the `Title` from the `Books` table and the `AuthorName` from the `Authors` table, aiming to display book titles alongside their authors' names.\n- It also sets `Books` as the primary table from which the query starts, establishing the context for the JOIN operations that follow.\n\n#### 2. `JOIN BooksAuthors ON Books.BookID = BooksAuthors.BookID`\n- The first JOIN operation. It joins the `Books` table with the `BooksAuthors` joining table, based on the `BookID`. This operation matches each book with its corresponding entries in the `BooksAuthors` table.\n\n#### 3. `JOIN Authors ON BooksAuthors.AuthorID = Authors.AuthorID`\n- The second JOIN operation. It joins the intermediate result (which includes information from `Books` and `BooksAuthors`) with the `Authors` table. The joining is based on the `AuthorID`, linking each entry in the BooksAuthors table with its respective author.\n\n\nBack: [[Table JOINs - Many to Many Relationships]] | Next: [[Table JOINs - Filter and Sort with JOINs]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Table-JOINs-JOIN-Tables-with-One-to-Many-Relationships":{"title":"Table JOINs - JOIN Tables with One to Many Relationships","content":"\n# Table JOINs - JOIN Tables with One to Many Relationships\n\nVideo Embedding\n\n## Understanding JOINs in One to Many Relationships\n\nGiven our bookstore database example from the previous lesson:\n### Authors Table:\n| AuthorID | AuthorName |\n| ---- | ---- |\n| 1 | J.K. Rowling |\n| 2 | George Orwell |\n| 3 | Leo Tolstoy |\n### Books Table:\n|BookID|Title|AuthorID|\n|---|---|---|\n|101|Harry Potter|1|\n|102|1984|2|\n|103|Animal Farm|2|\n|104|War and Peace|3|\n|105|Anna Karenina|3|\n\nTo retrieve data that spans across these two tables, we use the SQL JOIN operation. Let's see how we can use the JOIN command to fetch the list of books along with their authors' names.\n\n```sql\nSELECT Books.Title, Authors.AuthorName FROM Books\nJOIN Authors ON Books.AuthorID = Authors.AuthorID; \n```\n##### Expected Output:\n| Title | AuthorName |\n| ---- | ---- |\n| Harry Potter | J.K. Rowling |\n| 1984 | George Orwell |\n| Animal Farm | George Orwell |\n| War and Peace | Leo Tolstoy |\n| Anna Karenina | Leo Tolstoy |\nThis query effectively combines data from the `Books` and `Authors` tables by linking books to their respective authors by the AuthorID. The `JOIN` operation, facilitated by the `ON` clause, ensures that each book is matched with its author. The selected columns `Books.Title` and `Authors.AuthorName` are displayed in the resulting output.\n\nTo understand exactly how the SQL JOIN command works in our Authors and Books example, let's break down the query piece by piece.\n#### 1. `SELECT Books.Title, Authors.AuthorName`\n- **Purpose**: This part of the query specifies what data we want to retrieve. Here, we are asking for the `Title` from the `Books` table and the `AuthorName` from the `Authors` table.\n- **Action**: It tells the database to look at these two columns and prepare to output data from them.\n#### 2. `FROM Books`\n- **Purpose**: This clause specifies the primary table from which to retrieve data, which in this case is the `Books` table.\n- **Action**: It sets the context for the SQL query, indicating that the data will be selected from the `Books` table.\n#### 3. `JOIN Authors`\n- **Purpose**: Indicates that we want to combine rows from the `Books` table with rows from the `Authors` table.\n- **Action**: It initiates the action to merge data from the two tables based on a related column.\n#### 4. `ON Books.AuthorID = Authors.AuthorID`\n- **Purpose**: This is the condition on which the JOIN will be performed. To function, the JOIN needs to know what column it can use to match records between the two tables. `ON` is used to map this relationship. In this case, we are joining the tables based on the `AuthorID` column, which is common to both tables.\n- **Action**: It matches each row in the `Books` table with the corresponding row in the `Authors` table where the `AuthorID` is the same.\n\n\n\nBack: [[Table JOINs - One to Many Relationships]] | Next: [[Table JOINs - Many to Many Relationships]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Table-JOINs-Many-to-Many-Relationships":{"title":"Table JOINs - Many to Many Relationships","content":"# Table JOINs - Many to Many Relationships\n\nEmbed Video\n\n## Introduction to Many to Many Relationships\n\nA many to many relationship in databases occurs when multiple records in one table are associated with multiple records in another table. This kind of relationship often requires a third table, known as a junction, associative or joining table. This table is used to break a many to many relationship down into two one to many relationships.\n\nLet's explore this concept with a new set of tables for books and authors that represent a many to many relationship.\n\n### Authors Table:\n|AuthorID|AuthorName|\n|---|---|\n|1|Luna Bellatrix|\n|2|Orion Stardust|\n|3|Celeste Moon |\n### Books Table:\n|BookID|Title|\n|---|---|\n|101|Whispers of the Galaxy|\n|102|Secrets of the Eclipse|\n|103|Shadows in the Cosmos|\n|104|Starlight Symphony|\n|105|Moonlit Myth|\n### BooksAuthors Joining Table:\n|BookID|AuthorID|\n|---|---|\n|101|1|\n|102|2|\n|103|2|\n|103|1|\n|104|3|\n|105|3|\nIn the `BooksAuthors` table, both `BookID` and `AuthorID` are used together to create unique combinations, allowing for the representation of multiple authors per book and vice versa.\n\n### Understanding the Many to Many Relationship\n\n1. **First One to Many**: Each record in the `Authors` table can be linked to multiple records in the `BooksAuthors` table. For example, AuthorID 2 is linked to BookID 102 and 103. This is a one to many relationship from Authors to BooksAuthors.\n\n2. **Second One to Many**: Similarly, each record in the `Books` table can be linked to multiple records in the `BooksAuthors` table. For instance, BookID 103 is linked to AuthorID 1 and 2. This is another one to many relationship, but from Books to BooksAuthors.\n\n3. **The Many to Many**: These two one to many relationships combine to form a many to many relationship. An author can write multiple books, and a book can be written by multiple authors. The `BooksAuthors` table serves as a bridge, linking each book to one or more authors and each author to one or more books.\n\n\n\nBack: [[Table JOINs - JOIN Tables with One to Many Relationships]] | Next: [[Table JOINs - JOIN Tables with Many to Many Relationships]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Table-JOINs-One-to-Many-Relationships":{"title":"Table JOINs - One to Many Relationships","content":"# Introduction to One to Many Relationships\n\nVideo Embedding\n\n## What is a One to Many Relationship?\n\nIn relational databases, a One to Many relationship is the most fundamental type of relationship. This relationship exists when a record in one table can be associated with multiple records in another table.\n\nFor example, consider a database of a bookstore. Here, we have two tables: `Authors` and `Books`. An author can write multiple books, but each book is written by only one author. This is a classic One to Many relationship.\n\n### Authors Table:\n|AuthorID|AuthorName|\n|---|---|\n|1|J.K. Rowling|\n|2|George Orwell|\n|3|Leo Tolstoy|\n### Books Table:\n|BookID|Title|AuthorID|\n|---|---|---|\n|101|Harry Potter|1|\n|102|1984|2|\n|103|Animal Farm|2|\n|104|War and Peace|3|\n|105|Anna Karenina|3|\n### Understanding the Direction of the Relationship\n\nIt's important to understand exactly why this is a one to many relationship. Why can we can have many books per author but only one author per book? The structure of the table tells us this is how the relationship must work. Here's how:\n\n- **Single Author, Multiple Books**: Each author in the `Authors` table can write multiple books. An author's ID can appear in many rows in the `Books` table. For instance, if \"George Orwell\" writes two books, his ID appears next to each of those books in the `Books` table. Therefore an author can have many books.\n\n- **Single Book, Single Author**: Conversely, each book in the `Books` table is associated with only one author. For each row in the `Books` table, there is only a place for one AuthorID. For example, \"1984\" can only be associated with one author, George Orwell.\n\n\nBack: [[Table JOINs - DROP Tables and Run Script]] | Next: [[Table JOINs - JOIN Tables with One to Many Relationships]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Table-JOINs-Practice-Assignment":{"title":"Table JOINs - Practice Assignment","content":"\nIn addition to the practice problems from the lesson pages, write queries to do the following:\n\n\n### Submission Instructions\n\nPlease put all SQL queries for the practice questions into a single SQL file. Use comments to label each query with its respective question number. Submit this .sql file for your assignment on Canvas.\n\n\nBack: [[Table JOINs - Table Aliasing]]","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Table-JOINs-Table-Aliasing":{"title":"Table JOINs - Table Aliasing","content":"# Table JOINs - Table Aliasing\n\nVideo Embed\n\n## What is Table Aliasing?\n\nTable aliasing involves giving a table in your SQL query a temporary name. This temporary name (aka alias) is often an abbreviation of the full table name. This is particularly useful in queries involving multiple tables, as it simplifies the query syntax and makes it easier to read and write.\n\n### Example Using Authors and Books\n\nLet's revisit the Authors and Books tables and see how table aliasing can be applied.\n### Authors Table\n|AuthorID|AuthorName|\n|---|---|\n|1|J.K. Rowling|\n|2|George Orwell|\n|3|Leo Tolstoy|\n### Books Table\n|BookID|Title|AuthorID|\n|---|---|---|\n|101|Harry Potter|1|\n|102|1984|2|\n|103|Animal Farm|2|\n|104|War and Peace|3|\n|105|Anna Karenina|3|\n\nHere's how we might perform a join to get the Titles and Authors using aliasing:\n\n```sql\nSELECT b.Title, a.AuthorName FROM Books b\nJOIN Authors a ON b.AuthorID = a.AuthorID;\n```\n### Explanation:\n\n1. **`Books b`**: Here, `Books` is aliased as `b`. This means that in the rest of the query, we can refer to the `Books` table as `b`.\n\n2. **`Authors a`**: Similarly, `Authors` is aliased as `a`. Any reference to the `Authors` table can now be made using `a`.\n\n3. **`b.Title, a.AuthorName`**: Instead of writing `Books.Title` and `Authors.AuthorName`, we use the aliases, making the query more concise.\n\n4. **`b.AuthorID = a.AuthorID`**: The JOIN condition uses the aliases as a stand in for the full table names.\n\n\n\n\nBack: [[Table JOINs - Filter and Sort with JOINs]] | Next: [[Table JOINs - Practice Assignment]]\n","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]},"/Test-Page":{"title":"Test Page","content":"\nsome text\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=3e71f26b-d2a9-42d7-af8c-b0f10136ffe6\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nLet's find out if this work","lastmodified":"2024-01-17T18:30:56.358996943Z","tags":[]}}