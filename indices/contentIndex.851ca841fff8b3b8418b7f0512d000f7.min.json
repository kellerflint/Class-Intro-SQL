{"/":{"title":"Main Page","content":"\n\nHi, testing\n\n[[Test Page]]","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/DONT-FORGET":{"title":"DONT FORGET!","content":"\n\n\nBefore recording - zoom to 150% and collapse bookmarks.\n\n\nTODO:\n- Video on Canvas explaining this weeks lessons\n- LinkedIn Learning videos\n- Link obsidian in canvas\n- Add videos for each section (except last two probably don't need it. But do one for how to submit the assignment, include creating .sql file in vs code).\n- Add quiz. Maybe remove stupid questions though. Or make them just a single fill in the blank instead of multiple.\n\nUsing the backticks\n\nDidn't cover unique either, need to do that later.\n\nShould be in a handling null's section somewhere. \n- `IS NULL`: Returns true if a value is NULL.\n- `IS NOT NULL`: Returns true if a value is not NULL.\nTechnically these are comparison operators I believe but I don't want to deal with them in week 2.","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/Select-and-Filter-Data-Introduction":{"title":"Select and Filter Data - Introduction","content":"\n# Select and Filter Introduction\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=099d37f5-9a86-4ea6-95b8-b0f20177b4ed\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\nIn this section, we'll cover key SQL concepts to help you retrieve, filter and sort the information in your databases. We will cover using the SELECT statement to pick out the specific columns we're interested in. We'll learn to filter which rows we get using the WHERE clause and explore more some of the logic that can help us find exactly what we're looking for. Last, we'll understand how to sort our data using the ORDER BY clause.\n\nAs you progress through the lessons, make sure to solve the practice questions in your own database. Be sure to save all your queries to a file on your computer. You will need to submit them as part of your weekly assignment.\n\nBefore getting started you'll want to make sure that you have a text or code editor installed. You will need this to write SQL scripts. I'd recommend \u003ca href=\"https://code.visualstudio.com/\" target=\"_blank\"\u003eVisual Studio Code\u003c/a\u003e but you can use whatever software you'd like.\n\nNext: [[Select and Filter Data - Running Scripts]]","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/Select-and-Filter-Data-Logical-Operators":{"title":"Select and Filter Data - Logical Operators","content":"# Logical Operators\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1d1412b2-7cca-43cf-af61-b0f20177942c\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\nLogical operators are essential in SQL for combining multiple conditions in the WHERE clause and adding flexibility to your queries. With the right operators, you can filter for rows based on any combination of attributes and conditions.\n\nSome of the most commonly used logical operators used in SQL are:\n- `AND`: Returns true if both conditions are true.\n- `OR`: Returns true if at least one of the conditions is true.\n- `NOT`: Negates the condition, returning true if the condition is false.\n- `BETWEEN`: Returns true if a value lies within a specified range.\n- `IN`: Returns true if a value matches any value in a list.\n- `LIKE`: Returns true if a value matches a specified pattern.\n\nExpanding on the `Employees` table from our previous examples:\n\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 1 | John Doe | 28 | Marketing |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n| 4 | Sara Ali | 30 | Finance |\n| 5 | Mia Chen | 26 | Marketing |\n\nTo find employees over 30 years old in the IT department we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Age \u003e 30 AND Department = 'IT';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|3|Alex Ray|45|IT|\n\nAs 'Alex Ray' is the only employee who matches both criteria.\n\nAlternatively if we wanted to find employees who are either in the 'HR' departments OR over 30 years old we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Age \u003e 30 OR Department = 'IT';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|2|Jane Doe|32|HR|\n|3|Alex Ray|45|IT|\n\nBecause while 'Jane Doe' is not in the 'IT' department, she is older than 30 and only one condition needs to be met.\n\nTo find all employees who are between the ages of 20 and 30 we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Age BETWEEN 20 AND 30;\n```\n##### Expected Output: \n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 1 | John Doe | 28 | Marketing |\n| 4 | Sara Ali | 30 | Finance |\n| 5 | Mia Chen | 26 | Marketing |\n\nThis time the expected output includes Sara Ali because `BETWEEN` is inclusive meaning we'll also get employees who are equal to the thresholds.\n\nTo find employees who work in either 'Marketing', 'Finance', or 'IT' departments we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Department IN ('Marketing', 'Finance', 'IT');\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n|5|Mia Chen|26|Marketing|\n\nThe `LIKE` command is slightly more complicated. It can be used to find values that match a particular pattern a pattern. For example if we wanted to find employees whose names started the letter 'J' we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Name LIKE 'J%';\n```\n##### Expected Output:\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 1 | John Doe | 28 | Marketing |\n| 2 | Jane Doe | 32 | HR |\n\nThe `%` symbol after the 'J' is a wildcard that represents zero, one, or multiple characters. So this pattern is looking for Names that start with a 'J' followed by any number of any characters (or none at all).\n\n`Like` can allow you to match any pattern with the right wildcards. See \u003ca href=\"https://www.w3schools.com/sql/sql_wildcards.asp\" target=\"_blank\"\u003eSQL Wildcard Characters (w3schools.com)\u003c/a\u003e for more information on Wildcards.\n\n# Practice Questions\n\n4. Write a query to select all customers who are from 'Berlin', 'London', 'Vancouver', 'SÃ£o Paulo' or 'Madrid'.\n\n5. Write a query to select all customers who are not from 'Germany' and whose contact ages are under 60 years old.\n\n6. Write a query to select all customers whose contact ages are between 25 and 35 and whose contact name starts with an 'Al'.\n\nBack: [[Select and Filter Data - WHERE Clause and Comparison Operators]] | Next: [[Select and Filter Data - ORDER BY]]\n","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/Select-and-Filter-Data-Note-on-Semicolons":{"title":"Select and Filter Data - Note on Semicolons","content":"\n# Why use Semicolons?\n\nSo far we've only been executing a single query at a time but we could run more. A single query does not generally require a semicolon. However when you have multiple SQL statements in a script a semicolon is used to separate each statement. This prevents confusion for SQL about where one statement ends and the next begins.\n\nUsing semicolons is considered a best practice even when they are not strictly required and I will be expecting you to use them in your work for this course.\n\nBack: [[Select and Filter Data - SQL Comments]] | Next: [[Select and Filter Data - Practice Assignment]]","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/Select-and-Filter-Data-ORDER-BY":{"title":"Select and Filter Data - ORDER BY","content":"# ORDER BY\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1304790b-0894-4c02-90b6-b0f2017793fc\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\nThe `ORDER BY` clause is used to sort the result set of a query by one or more columns. It can sort the data in ascending or descending order. By default, it sorts in ascending order. \n\n`ORDER BY` must come after the WHERE clause. This makes sense if we think about it, we do not want to sort the rows until we've already filtered out the ones we don't want.\n\nUsing the `Employees` table from the previous example:\n\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|2|Jane Doe|32|HR|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n|5|Mia Chen|26|Marketing|\n\nWe can sort the results by columns such as age with:\n\n```sql\nSELECT * FROM Employees\nORDER BY Age;\n```\n##### Expected Output\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 5 | Mia Chen | 26 | Marketing |\n| 1 | John Doe | 28 | Marketing |\n| 4 | Sara Ali | 30 | Finance |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n\nIf we instead wrote:\n\n```sql\nSELECT * FROM Employees\nORDER BY Age DESC;\n```\n\nWe would get the same list but sorted from the highest to lowest age.\n\nIt is also possible to `ORDER BY` multiple columns:\n\n```sql\nSELECT * FROM Employees\nORDER BY Department, Age;\n```\n##### Expected Output:\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 4 | Sara Ali | 30 | Finance |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n| 5 | Mia Chen | 26 | Marketing |\n| 1 | John Doe | 28 | Marketing |\n\nIn this ordered list, employees are sorted by their departments ('Finance', 'HR', 'IT', and 'Marketing'), and within each department, they are sorted by their age from youngest to oldest.\n\n# Practice Questions\n\n7. Write a query to select all customers and order them alphabetically by the customer name.\n\n8. Write a query to select all customers and order them by their Ids from highest to lowest.\n\nBack: [[Select and Filter Data - Logical Operators]] | Next: [[Select and Filter Data - SQL Comments]]","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/Select-and-Filter-Data-Practice-Assignment":{"title":"Select and Filter Data - Practice Assignment","content":"# Practice Assignment \n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=301026b3-0fb6-4a0b-abc9-b0f2017793d2\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\nIn addition to the practice problems from the lesson pages, write queries to do the following.\n\n9. Select customers who are not from 'Berlin' or 'London' and are younger than 50. Order the results by age in descending order.\n\n10. Select customers whose customer name starts with an 'L' or an 'M'. Order the results by Id in descending order.\n\n### Submission Instructions\n\nPlease put all SQL queries for the practice questions into a single SQL file. Use comments to label each query with its respective question number. Submit this .sql file for your assignment on Canvas.\n\nBack: [[Select and Filter Data - Note on Semicolons]]","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/Select-and-Filter-Data-Running-Scripts":{"title":"Select and Filter Data - Running Scripts","content":"# Running Database Scripts\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=3b6bc768-5330-4f2b-9f42-b0f20177a502\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\nTo get started with hands-on practice, you'll need data to populate your database. We'll do this by running a SQL script. Follow these steps to execute the script on your database:\n\n1. **Open the SQL File**:\n    - Open the script file \u003ca href=\"https://github.com/kellerflint/Class-Intro-SQL/blob/hugo/content/Files/CustomerScript.sql\" target=\"_blank\"\u003eCustomerScript.sql (github.com)\u003c/a\u003e. It contains the commands to create tables and insert data into them.\n2. **Access phpMyAdmin**:\n    - From the WebHostingForStudents Client Area, find your website and click the \"Log in to cPanel\" button.\n    - Once in cPanel, click \"phpMyAdmin\" under the \"Databases\" section.\n3. **Connect to Your Database**:\n    - Make sure you're connected to the database that you want to run the script on. In this case, it will be the database you created for this class. In phpMyAdmin you can select the database by clicking on its name on the left side of the screen.\n4. **Run the Script**:\n    - To run SQL code, click the \"SQL\" tab in the horizontal menu at the top of the screen.\n    - Copy over the entire contents of the SQL script into the editor. \n    - Click the \"Go\" button at the bottom right. This will create the tables defined in the script and populate them with data.\n5. **Verify the Data**:\n    - After running the script, check to ensure that tables are created and data is inserted. You can do this by running a simple SELECT query, like `SELECT * FROM tablename;.\n\nBack: [[Select and Filter Data - Introduction]] | Next: [[Select and Filter Data - SELECT Statement]] ","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/Select-and-Filter-Data-SELECT-Statement":{"title":"Select and Filter Data - SELECT Statement","content":"# SELECT Statement\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=aa477a38-2f05-4bf1-9aaf-b0f201779f3c\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n## Database Basics Refresher\n\nDatabases exist to help us store and manage large amounts of information in an organized way. In SQL this data is organized into tables consisting of rows and columns. Each table in a database represents a different entity, such as customers, products, or orders. The rows in the table represent individual records, and the columns represent the attributes of these entities.\n##### Example Table: Customers\n| CustomerID | FirstName | LastName | Email               |\n|------------|-----------|----------|---------------------|\n| 1          | John      | Doe      | johndoe@email.com   |\n| 2          | Jane      | Smith    | janesmith@email.com |\n| 3          | Alex      | Johnson  | alexj@email.com     |\n\n## SELECT Statements\n\nThe `SELECT` statement is used to retrieve data from a database. It allows you to specify exactly which data you want to fetch from a table.\n\n##### Basic SELECT Syntax\n\n```sql\nSELECT column1, column2, ...\nFROM table_name;\n```\n\n##### Selecting Specific Columns\n\nTo retrieve specific columns from a table, list the column names separated by commas. For example the query:\n\n```sql\nSELECT FirstName, LastName\nFROM Customers;\n```\n##### Expected Output:\n| FirstName | LastName |\n| ---- | ---- |\n| John | Doe |\n| Jane | Smith |\n| Alex | Johnson |\n##### Selecting All Columns\n\nTo select all columns from a table, use the asterisk `*` symbol:\n\n```sql\nSELECT *\nFROM Customers;\n```\n\nThis query will result in the entire Customers table being displayed.\n\n# Practice Questions\n\n1. Select only the contact's name and age columns from the Customer table.\n\nBack: [[Select and Filter Data - Running Scripts]] | Next: [[Select and Filter Data - WHERE Clause and Comparison Operators]]","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/Select-and-Filter-Data-SQL-Comments":{"title":"Select and Filter Data - SQL Comments","content":"\n# Comments\n\nComments in SQL are used to explain sections of SQL statements, or to prevent execution of SQL statements. They are helpful for documentation purposes and making code more readable.\n\n## Types of Comments:\n\n#### Single-Line Comments\n\n```sql\n-- This is a single-line comment\nSELECT * FROM Employees;\n```\n#### Multi-Line Comments:\n\n```sql\n/* This is a multi-line comment\n   that covers multiple lines */\nSELECT * FROM Employees;\n\n```\n\nComments are a crucial part of writing maintainable, understandable SQL code, especially in complex queries or when working in teams. They allow you to explain why a certain SQL statement is used, or to temporarily disable parts of SQL code during testing and development.\n\nBack: [[Select and Filter Data - ORDER BY]] | Next: [[Select and Filter Data - Note on Semicolons]]","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/Select-and-Filter-Data-WHERE-Clause-and-Comparison-Operators":{"title":"Select and Filter Data - WHERE Clause and Comparison Operators","content":"# WHERE Clause\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=10ae282e-3ce2-4f40-81b7-b0f201779467\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\nThe WHERE clause in SQL is used to filter records from a table, returning only those that meet a specific condition. \n### Basics of the WHERE Clause \n\nThe WHERE clause follows the syntax: \n\n```sql\nSELECT column1, column2, ... FROM table_name \nWHERE condition;\n```\n\n### Comparison Operators\n\nThere are many different types of operators that can be used in our condition to filter what rows we get back based on the data they contain.\n\nThe first type are the comparison operators. These are used to compare values in a column with other values or expressions. These include:\n- `=` : Equal to\n- `\u003c` `\u003e` or `!` `=` : Not equal to\n- `\u003e` : Greater than\n- `\u003c` : Less than\n- `\u003e` `=` : Greater than or equal to\n- `\u003c` `=` : Less than or equal to\n\nFor example, assume we have a table `Employees` with the following data:\n\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|2|Jane Doe|32|HR|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n\nTo get details of employees from the 'Marketing' department we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Department = 'Marketing';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n\nIf we wanted to find all employees who are not in the 'HR' department we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Department \u003c\u003e 'HR';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n\nIf we wanted to see information for employees over the age of 30 we could write:\n\n```sql\nSELECT * FROM Employees \nWHERE Age \u003e 30;\n```\n##### Expected Output:\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n# Practice Questions\n\n2. Write a query to select all customers who are from 'Germany'.\n\n3. Write a query to select all customers whose contact age is less than or equal to 20.\n\nBack: [[Select and Filter Data - SELECT Statement]] | Next: [[Select and Filter Data - Logical Operators]]","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]},"/Test-Page":{"title":"Test Page","content":"\nsome text\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=3e71f26b-d2a9-42d7-af8c-b0f10136ffe6\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nLet's find out if this work","lastmodified":"2024-01-09T23:02:30.213822299Z","tags":[]}}