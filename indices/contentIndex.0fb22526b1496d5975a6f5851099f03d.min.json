{"/":{"title":"Landing Page","content":"\n[[SQL For Data Analytics Lesson Index]]\n\n[[NET Example]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Entity-Relationship-Diagrams-Basic-Structure":{"title":"Entity Relationship Diagrams - Basic Structure","content":"# Entity Relationship Diagrams - Basic Structure\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=e3fcaaa2-10b5-48b3-8e8e-b1160003d8d1\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nEntity Relationship Diagrams come in various formats, but they share common elements that help us understand the architecture of a database. As we progress through this course, we will explore different ways to represent ERDs. For now, let's focus on a simple example using an HR database.\n\n### HR Entity Relationship Diagram\n\u003cimg src=\"https://raw.githubusercontent.com/kellerflint/Class-Intro-SQL/hugo/content/Images/hr_db_erd.png\"\u003e\n\n*Source:* https://www.sqltutorial.org/sql-sample-database/\n\nThe data here should look familiar, it's the diagram we used for the HR database in the Querying and Analysis assignment.\n\n## Table Structure\n\nThe following properties are universal for all ERDs:\n- **Tables as Boxes**: Each table in the database is represented as a box.\n- **Rows and Columns**: Inside each box, the rows represent the columns of the table. When diagraming, we don't care about what specific rows of data (e.g. the actual information for each employees). Instead we care about the structure of the tables themselves and how they relate to each other.\n- **Primary Key Notation**: In this ERD, the primary key for each table is indicated with an asterisk (`*`). Not every diagram uses an `*`, but they will always denote the primary key in some way.\n\nTake the `countries` table for example. It is represented as a box in the HR Entity Relationship Diagram.\n- **Columns**: Inside the box, you will find `country_id`, `country_name`, and `region_id`. While they are represented as rows in the diagram, these are actually the columns of the table in the database.\n- **Primary Key**: The `country_id` is the primary key, as denoted by the `*` before it.\n\n# Practice Questions \n\n1. According to the HR Entity Relationship Diagram, what will the columns be for the `countries` table?\n2. Which column is the primary key for the `countries` table? How is the primary key shown in this diagram?\n# Lessons\n- [[Entity Relationship Diagrams - Introduction]]\n- Entity Relationship Diagrams - Basic Structure\n- **Next**: [[Entity Relationship Diagrams - Representing Relationships]]\n- [[Entity Relationship Diagrams - Data Types and Nullability]]\n- [[Entity Relationship Diagrams - Querying]]\n- [[Entity Relationship Diagrams - Creating Tables]]\n- [[Entity Relationship Diagrams - Practice Assignment]]","lastmodified":"2024-02-14T00:48:09.068234094Z","tags":[]},"/Entity-Relationship-Diagrams-Creating-Tables":{"title":"Entity Relationship Diagrams - Creating Tables","content":"# Entity Relationship Diagrams - Creating Tables\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=29da4567-e32d-4981-a177-b1160003ee40\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n# Practice questions\n\n### College Courses Diagram\n\u003cimg src=\"https://raw.githubusercontent.com/kellerflint/Class-Intro-SQL/hugo/content/Images/college_courses_erd.png\"\u003e\n\n9. Write CREATE statements for the `student` and `instructor` tables. \n10. INSERT two rows of data into each table.\n\t*Dates are put in quotes like strings/varchars. They are formatted with the Year-Month-Day. For example February 26th, 2024 would be `'2024-02-26'`.*\n# Lessons\n- [[Entity Relationship Diagrams - Introduction]]\n- [[Entity Relationship Diagrams - Basic Structure]]\n- [[Entity Relationship Diagrams - Representing Relationships]]\n- [[Entity Relationship Diagrams - Data Types and Nullability]]\n- [[Entity Relationship Diagrams - Querying]]\n- Entity Relationship Diagrams - Creating Tables\n- **Next**: [[Entity Relationship Diagrams - Practice Assignment]]\n","lastmodified":"2024-02-14T00:48:09.068234094Z","tags":[]},"/Entity-Relationship-Diagrams-Data-Types-and-Nullability":{"title":"Entity Relationship Diagrams - Data Types and Nullability","content":"# Entity Relationship Diagrams - Data Types and Nullability\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=adeeea60-d527-4575-b612-b1160003d874\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nIn addition to showing basic structure of tables and their relationships, Entity Relationship Diagrams (ERDs) can also give us more insight into the columns. This can include data types for each column and whether a column can have null values. Let's explore these concepts with an example diagram.\n\n### College Courses Diagram\n\u003cimg src=\"https://raw.githubusercontent.com/kellerflint/Class-Intro-SQL/hugo/content/Images/college_courses_erd.png\"\u003e\n\n\n## Data Types\n\nEach column in a table has a specific data type that dictates the kind of data it can hold to the right of its name. There are many different types but some of the most common are:\n\n- **Strings**: These are sequences of characters like the words in a sentence. In SQL they are referred to as `VARCHAR` (variable character). VARCHARs can be given a maximum number of characters that they can accept in parathesis. A `VARCHAR(255)` could hold 255 characters.\n- **Datetimes**: This type represents dates and times. The keyword is SQL is `DATETIME`.\n- **Integers**: These are whole numbers. The keyword in SQL is `INT`.\n- **Decimals**: These are numbers with a fractional part, such as currency or averages. Decimals are given two parameters, a size and a number of digits that can appear after the decimal point. `DECIMAL(4,2)` could hold 4 total digits with two of those digits appearing after the decimal point. So `DECIMAL(4,2)` could hold any value between -99.99 and 99.99.\n\nA full list of data types can be found here at W3Schools: [SQL Data Types for MySQL, SQL Server, and MS Access (w3schools.com)](https://www.w3schools.com/sql/sql_datatypes.asp)\n\n## Nullability\n\nIn addition to data types, ERDs can indicate whether a column can have a null value. A null value represents the absence of a value. Whether a field can be null or not depends on the business rules and data requirements:\n\n- **Nullable Fields**: These are optional and are marked with a question mark (`?`) after the data type in this diagram.\n- **Non-Nullable Fields**: These are required and have no question mark.\n\nTaking a look at the College Courses Diagram above, you'll notice that each column in the tables has a defined data type. Some fields, like `phone_number` in the `student` table, are marked as nullable (indicated by `varchar(11)?`), meaning it is not mandatory for a record to have this information.\n\n# Practice Questions\n\n5. Suppose we need to record the `office_location` for each `instructor` in the College Courses Diagram. What data type should this column be and should it be allowed to be null? Why?\n6. Imagine we want a `last_accessed` column  in the `enrollment` table that tracks when a student last signed into their class on Canvas. What data type should this column be and should it be allowed to be null? Why?\n# Lessons\n- [[Entity Relationship Diagrams - Introduction]]\n- [[Entity Relationship Diagrams - Basic Structure]]\n- [[Entity Relationship Diagrams - Representing Relationships]]\n- Entity Relationship Diagrams - Data Types and Nullability\n- **Next**: [[Entity Relationship Diagrams - Querying]]\n- [[Entity Relationship Diagrams - Creating Tables]]\n- [[Entity Relationship Diagrams - Practice Assignment]]","lastmodified":"2024-02-14T00:48:09.068234094Z","tags":[]},"/Entity-Relationship-Diagrams-Introduction":{"title":"Entity Relationship Diagrams - Introduction","content":"# Entity Relationship Diagrams - Introduction\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=2a747c43-2bbe-4729-92cb-b1160003e4a0\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nEntity Relationship Diagrams (ERDs) are a fundamental part of database design and architecture. They provide a visual representation of the data and how entities within a database relate to each other. Using ERDs can make it much easier to grasp the structure of a database without having to examine each table individually. In this section you will learn to read these diagrams, understand the relationships between tables, and apply this knowledge to create and query tables.\n# Lessons\n- Select and Filter Data - Introduction\n- **Next**: [[Entity Relationship Diagrams - Basic Structure]]\n- [[Entity Relationship Diagrams - Representing Relationships]]\n- [[Entity Relationship Diagrams - Data Types and Nullability]]\n- [[Entity Relationship Diagrams - Querying]]\n- [[Entity Relationship Diagrams - Creating Tables]]\n- [[Entity Relationship Diagrams - Practice Assignment]]\n","lastmodified":"2024-02-14T00:48:09.068234094Z","tags":[]},"/Entity-Relationship-Diagrams-Practice-Assignment":{"title":"Entity Relationship Diagrams - Practice Assignment","content":"# Entity Relationship Diagrams - Practice Assignment\n\nIn addition to the practice problems from the lesson pages, write queries to do the following:\n\n11. (3pts) The Digital Movie Rentals Diagram below has at least 7 problems. Some of the problems are logical (things that don't make sense for data we're tracking) and some are structural (fundamental issues with the columns or relationships in the diagram). List each problem you find and briefly explain either why it's a issue or how you could fix it. Identify at least 3.\n12. (Optional Challenge - 0pts) See if you can identify all 7 of the problems in the diagram.\n\n### Digital Movie Rentals Diagram\n\u003cimg src=\"https://raw.githubusercontent.com/kellerflint/Class-Intro-SQL/hugo/content/Images/movie_rentals_problems_erd.png\"\u003e\n\n# Submission Instructions\n\nPlease label each question with it's number and write all answers in a single file using your text editor of choice. Copy your answers over to the submission area for the assignment on Canvas.\n# Lessons\n- [[Entity Relationship Diagrams - Introduction]]\n- [[Entity Relationship Diagrams - Basic Structure]]\n- [[Entity Relationship Diagrams - Representing Relationships]]\n- [[Entity Relationship Diagrams - Data Types and Nullability]]\n- [[Entity Relationship Diagrams - Querying]]\n- [[Entity Relationship Diagrams - Creating Tables]]\n- Entity Relationship Diagrams - Practice Assignment\n\n\n","lastmodified":"2024-02-14T00:48:09.068234094Z","tags":[]},"/Entity-Relationship-Diagrams-Querying":{"title":"Entity Relationship Diagrams - Querying","content":"# Entity Relationship Diagrams - Querying\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1b0c0429-8f12-4f00-928d-b1160003d851\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n# Practice questions\n\n### College Courses Diagram\n\u003cimg src=\"https://raw.githubusercontent.com/kellerflint/Class-Intro-SQL/hugo/content/Images/college_courses_erd.png\"\u003e\n\n7. Write a SQL query to retrieve the start date of all classes taught by the instructor named \"Tina\".\n8. Write a SQL query to retrieve the email addresses of all students who are taking classes that contain \"Software\" in the `title`.\n\n*You won't be able to run these since I haven't given you a database for this diagram. Write the queries based on what's in the College Courses Diagram.*\n# Lessons\n- [[Entity Relationship Diagrams - Introduction]]\n- [[Entity Relationship Diagrams - Basic Structure]]\n- [[Entity Relationship Diagrams - Representing Relationships]]\n- [[Entity Relationship Diagrams - Data Types and Nullability]]\n- Entity Relationship Diagrams - Querying\n- **Next**: [[Entity Relationship Diagrams - Creating Tables]]\n- [[Entity Relationship Diagrams - Practice Assignment]]\n","lastmodified":"2024-02-14T00:48:09.068234094Z","tags":[]},"/Entity-Relationship-Diagrams-Representing-Relationships":{"title":"Entity Relationship Diagrams - Representing Relationships","content":"# Entity Relationship Diagrams - Representing Relationships\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=b9a748d1-1060-4e42-85a0-b1160003d89b\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nEntity Relationship Diagrams (ERDs) not only show us the entities and their attributes but also how these entities interact with each other. The lines connecting the tables represent these relationships and are necessary to understand the database's structure. Let's break down how to read these relationships using the HR database ERD from our previous lessons.\n\n### HR Entity Relationship Diagram\n\u003cimg src=\"https://raw.githubusercontent.com/kellerflint/Class-Intro-SQL/hugo/content/Images/hr_db_erd.png\"\u003e\n\n*Source:* https://www.sqltutorial.org/sql-sample-database/\n## Interpreting Relationships\n\nThe lines between the tables indicate how the entities relate to each other. You will notice different endings on these lines, such as a single straight line or a forked line. These symbols tell us about the type and direction of the relationship.\n### One-to-Many Relationship\n\nConsider the relationship between the `employees` and `jobs` tables in the HR Entity Relationship Diagram:\n- **Single Line**: This represents the \"one\" side of the relationship.\n- **Forked Line**: This symbolizes the \"many\" side of the relationship.\n\nThis is known as \"Crow's Foot Notation\" and is widely used in database diagraming.\n\nWhen we read the diagram:\n- **From Jobs to Employees**: Each job can have many employees. This is because the line ends with a forked symbol at the `employees` table.\n- **From Employees to Jobs**: Each employee has only one job, indicated by the single line ending at the `jobs` table.\n\nThis visualization helps us understand that each employee is associated with one job and each job title can be held by multiple employees.\n\n### Employees-Dependents Example\n\nNow, let's look at the relationship between `employees` and `dependents`. Based on the HR Entity Relationship Diagram, what is the relationship between these two table? Try to find out for yourself before continuing.\n\nTo understand the relationship, do the following:\n1. Look at the `employees` table. The line connecting it to `dependents` ends with a pronged line at the `dependents` table. This indicates that an employee can have many dependents.\n2. Now, examine the `dependents` table. The line connecting it to `employees` ends with a single straight line. This indicates that a dependent can only have one employee.\n\nThis relationships is also suggested by the structure of the table itself. We can see that `dependents` has a column for `employee_id`, suggesting that each dependent can be linked to a single employee.\n\n# Practice Questions\n\n3. What is the relationship between `regions` and `countries`? What steps did you take to determine this from the diagram?\n4. What is the relationship between `departments` and `employees`? What steps did you take to determine this from the diagram?\n# Lessons\n- [[Entity Relationship Diagrams - Introduction]]\n- [[Entity Relationship Diagrams - Basic Structure]]\n- Entity Relationship Diagrams - Representing Relationships\n- **Next**: [[Entity Relationship Diagrams - Data Types and Nullability]]\n- [[Entity Relationship Diagrams - Querying]]\n- [[Entity Relationship Diagrams - Creating Tables]]\n- [[Entity Relationship Diagrams - Practice Assignment]]\n\n","lastmodified":"2024-02-14T00:48:09.068234094Z","tags":[]},"/Old-or-Temp-Pages/DONT-FORGET":{"title":"DONT FORGET!","content":"\n\n\n\nBefore recording - zoom to 150% and collapse bookmarks for extra space.\n\n\nThings I missed and stuff that needs to be fixed on the next pass:\n- I need to cover dealing with dates in particular with comparitors. I also need to talk a little bit about data types and when you use single vs double quotes.\n- Didn't cover unique\n- Should be in a handling null's section somewhere. \n\t- What `NULL` is and what it means. Data missing vs intentional.\n\t- `IS NULL`: Returns true if a value is NULL.\n\t- `IS NOT NULL`: Returns true if a value is not NULL.\n- We've covered DROP but not DROP IF EXISITS. Make sure to do that when we start creating our own databases.\n\n\n\nNext up / missed for ERDs:\n- Cardinality?\n- \n- Maybe quick many to many note?\n- Self joins (might be a next section topic though)\n- Creating ERDs and design?\n- Creating tables with FK and PK.\n\t- Really we should do this in the other order.\n\t\t- First do the ERDs\n\t\t- Second do the table creates, then you can PK and FK and how to write them.\n\t\t- Then go on to talk about design.\n\t\t- Then you'd skip the creating tables part of the ERD lesson. It would go more naturally in the creating and populating section anyways.","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Old-or-Temp-Pages/NET-Example":{"title":"NET Example","content":"Model\n```cs\npublic class Book\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Author { get; set; }\n    public int Year { get; set; }\n}\n```\n\nService\n```cs\npublic interface IBookRepository\n{\n    Book GetById(int id);\n    void Add(Book book);\n    void Update(Book book);\n    void SaveChanges();\n}\n```\n\n```cs\npublic interface IBookService\n{\n    Task\u003cBook\u003e GetBookByIdAsync(int id);\n    Task\u003cBook\u003e AddBookAsync(Book book);\n    Task\u003cBook\u003e UpdateBookAsync(int id, Book book);\n}\n```\n\n```cs\npublic class BookService : IBookService\n{\n    private readonly IBookRepository _bookRepository;\n\n    public BookService(IBookRepository bookRepository)\n    {\n        _bookRepository = bookRepository;\n    }\n\n    public Book GetBookById(int id)\n    {\n        return _bookRepository.GetById(id);\n    }\n\n    public Book AddBook(Book book)\n    {\n        _bookRepository.Add(book);\n        _bookRepository.SaveChanges();\n        return book;\n    }\n\n    public Book UpdateBook(int id, Book updatedBook)\n    {\n        var book = _bookRepository.GetById(id);\n        if (book != null)\n        {\n            book.Title = updatedBook.Title;\n            book.Author = updatedBook.Author;\n            book.Year = updatedBook.Year;\n            _bookRepository.Update(book);\n            _bookRepository.SaveChanges();\n        }\n        return book;\n    }\n}\n```\n\n\nController\n```cs\nusing Microsoft.AspNetCore.Mvc;\n\n[ApiController]\n[Route(\"[controller]\")]\npublic class BooksController : ControllerBase\n{\n    private readonly IBookService _bookService;\n\n    public BooksController(IBookService bookService)\n    {\n        _bookService = bookService;\n    }\n\n    [HttpGet(\"{id}\")]\n    public IActionResult Get(int id)\n    {\n        var book = _bookService.GetBookById(id);\n        if (book == null) return NotFound();\n        return Ok(book);\n    }\n\n    [HttpPost]\n    public IActionResult Post([FromBody] Book book)\n    {\n        var newBook = _bookService.AddBook(book);\n        return CreatedAtAction(nameof(Get), new { id = newBook.Id }, newBook);\n    }\n\n    [HttpPut(\"{id}\")]\n    public IActionResult Put(int id, [FromBody] Book book)\n    {\n        var updatedBook = _bookService.UpdateBook(id, book);\n        if (updatedBook == null) return NotFound();\n        return Ok(updatedBook);\n    }\n}\n```\n\nProgram.cs (application entry point)\n```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped\u003cIBookService, BookService\u003e();\nbuilder.Services.AddScoped\u003cIBookRepository, BookRepository\u003e();\n\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n\n```","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Querying-and-Analysis-for-HR-Database-Project-Assignment":{"title":"Querying and Analysis for HR Database Project - Assignment","content":"\n# Querying and Analysis for HR Database Project - Assignment\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=531fbeb7-cdae-4733-a89c-b1010055588d\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nEvery questions should be answered with exactly one query. You will need exactly one SELECT statement per question. Be sure to provide complete and correct answers to each questions.\n# Section 1: Understand the Data Structure\n\n**Question 1:** Write a query to list all the regions available in the `regions` table.\n\n**Question 2:** Find all countries in the `countries` table that are part of the region with `region_id` 2. Display the country names and their respective region IDs.\n\n**Question 3:** List the job titles from the `jobs` table where the minimum salary is greater than 5,000 a month. Order the results by the minimum salary in ascending order.\n\n**Question 4**: Retrieve the city and street address of all locations from the `locations` table that have the `country_id` of of 'UK'. Sort the results by city in alphabetical order.\n\n**Question 5**: Identify all departments in the `departments` table that have the `location_id` 1700. Display the department name and location ID.\n\n**Question 6**: Find all employees whose last name starts with an 'H'. Display their employee ID, first name, last name, email, and salary.\n\n**Question 7**: Display the first and last names of dependents along with the ID of the employee they are related to. Order the results by employee ID in descending order.\n\n# Section 2: Construct Relational Queries\n\n**Question 8**: List all dependents along with the names of the employees they are dependent on. Display each dependent's first and last name, and the first and last name of the associated employee.\n\n**Question 9**: Which employees work in the 'Shipping' department? Display the department name along with each employee's IDs, first name, and last name.\n\n**Question 10**: Find all locations in the 'Americas' region. Display the country name, state/province, city and street address.  List them in alphabetical order by the state/province.\n\n**Question 11**: List the first names, last names, job titles and salaries a of all employees who have 'Manager' in their job title.\n\n**Question 12**: Display the names and job titles of employees who work in a city than 'Seattle'. Display the name of the city they work in as well.\n\n# Section 3: Perform Data Analysis\n\n***Use a multi-line comment to write explanations in the same .sql file as your queries.***\n\nWARNING: **DO NOT USE COMMAND THAT HAVE NOT BEEN COVERED IN CLASS!** Aggregation functions, GROUP BY and sub-querying could be helpful, but are far beyond the scope of this project. The point is to draw what conclusions you can using the tools we have so far.\n\n**Question 13**: In what months are most employees hired? Provide a single query to justify your answer.\n*You can use `MONTH(some_date_column)` to extract just the month from a date.*\n\n**Question 14**: Why is Steven King's manager ID null? Is it a case of missing data or was it intentionally left blank? Write a one to three sentence explanation. Provide a single query to prove your answer.\n\n**Question 15**: Which cities seem to pay the highest salaries? Provide the query you wrote to explore the relationship between location and salary. Write a few sentences explaining how you came to this conclusion based on your query results.\n*It might be useful to order by two columns! Think about which two would make the most sense. See [[Select and Filter Data - ORDER BY]] for a refresher on ordering by multiple columns.*\n\n**IMPORTANT**: Make sure you copy your **ENTIRE SCRIPT** into PHPMyAdmin and run it against the database before you submit. Confirm that everything works as expected. **If you submit a script that does not run it will receive a ZERO!** Start early so you have time to get help and make corrections if needed!\n\nBack: [[Querying and Analysis for HR Database Project - HR Database Overview]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Querying-and-Analysis-for-HR-Database-Project-HR-Database-Overview":{"title":"Querying and Analysis for HR Database Project - HR Database Overview","content":"\n\n# Querying and Analysis for HR Database Project - HR Database Overview\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1bda4f91-4cd6-4dad-b0e3-b10100555862\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## Initialize the HR Database\n\n- DROP the tables from your previous assignment(s), if necessary\n\t- See [[Table JOINs - DROP Tables]] for a refresher on dropping tables.\n- Run the following script to populate your database -\u003e \u003ca href=\"https://github.com/kellerflint/Class-Intro-SQL/blob/hugo/content/Files/HRScript.sql\"\u003eHRScript.sql (github.com)\u003c/a\u003e\n\t- See [[Select and Filter Data - Running Scripts]] for a refresher on running DB scripts.\n## HR Database Overview\n\nThe HR Database is designed to mirror a typical business's human resources data management system. It's structured to handle employee data, departmental divisions, and job details. Here's a brief description of each table:\n\n##### 1. `employees` Table:\n\n- `employee_id`: Unique identifier for each employee (Primary Key).\n- `first_name`: First name of the employee.\n- `last_name`: Last name of the employee.\n- `email`: Email address of the employee.\n- `phone_number`: Contact phone number of the employee.\n- `hire_date`: The date when the employee was hired.\n- `job_id`: Identifier for the job role of the employee, referencing `jobs` (Foreign Key).\n- `salary`: The salary of the employee.\n- `manager_id`: The ID of the employee's manager, referencing `employees` (Foreign Key).\n- `department_id`: Identifier for the department the employee belongs to, referencing `departments` (Foreign Key).\n\n##### 2. `jobs` Table:\n\n- `job_id`: Unique identifier for each job role (Primary Key).\n- `job_title`: Title of the job role.\n- `min_salary`: Minimum salary for the job role.\n- `max_salary`: Maximum salary for the job role.\n\n##### 3. `departments` Table:\n\n- `department_id`: Unique identifier for each department (Primary Key).\n- `department_name`: Name of the department.\n- `location_id`: Identifier for the location of the department, referencing `locations` (Foreign Key).\n\n##### 4. `dependents` Table:\n\n- `dependent_id`: Unique identifier for each dependent (Primary Key).\n- `first_name`: First name of the dependent.\n- `last_name`: Last name of the dependent.\n- `relationship`: The relationship of the dependent to the employee.\n- `employee_id`: Identifier for the employee to whom the dependent is related, referencing `employees` (Foreign Key).\n\n##### 5. `regions` Table:\n\n- `region_id`: Unique identifier for each region (Primary Key).\n- `region_name`: Name of the region.\n\n##### 6. `countries` Table:\n\n- `country_id`: Unique identifier for each country (Primary Key).\n- `country_name`: Name of the country.\n- `region_id`: Identifier for the region to which the country belongs, referencing `regions` (Foreign Key).\n\n##### 7. `locations` Table:\n\n- `location_id`: Unique identifier for each location (Primary Key).\n- `street_address`: Physical address of the location.\n- `postal_code`: Postal code of the location.\n- `city`: City where the location is based.\n- `state_province`: State or province of the location.\n- `country_id`: Identifier for the country of the location, referencing `countries` (Foreign Key).\n\n\n\nBack: [[Querying and Analysis for HR Database Project - Introduction]] | Next: [[Querying and Analysis for HR Database Project - Assignment]]\n","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Querying-and-Analysis-for-HR-Database-Project-Introduction":{"title":"Querying and Analysis for HR Database Project - Introduction","content":"\n# Querying and Analysis for HR Database Project - Introduction\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=15d9c2bc-ef2e-4654-bf9f-b101005557e5\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nThis assignment is divided into three sections, each aimed at developing a different aspect of your querying and analytical skills.\n\nIt is **ESSENTIAL** that you start project assignments early so you have time to get help!\n# Section 1: Understand the Data Structure\n\nIn this section, you will familiarize yourself with the structure of our sample HR database. Your tasks will involve writing SQL queries to explore the contents of each tables. You will:\n- Retrieve and observe data from single tables.\n- Use WHERE clauses to filter data based on specific conditions.\n- Apply ORDER BY to sort data and make your result sets more readable.\n\n# Section 2: Construct Relational Queries\n\nThis section is designed to make you think about how to retrieve meaningful information from multiple tables to answer a question. You will:\n- Use SELECT statements to gather data across related tables.\n- Employ logical and comparison operators to refine your search criteria.\n- Perform table joins to consolidate data from different sources.\n\n# Section 3: Perform Data Analysis\n\nThis final section of this assignment moves beyond the syntax of SQL and requires you to start thinking like a data analyst. You will:\n- Write queries to answer high-level questions.\n- Analyze query results to identify patterns.\n- Compare and contrast data to draw conclusions using your best judgement.\n\nNext: [[Querying and Analysis for HR Database Project - HR Database Overview]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/SQL-For-Data-Analytics-Lesson-Index":{"title":"SQL For Data Analytics Lesson Index","content":"# SQL For Data Analytics Lesson Index\n\nModule One:\n- Introduction to Databases and Relational Tables\n- [[Select and Filter Data - Introduction]]\n- [[Table JOINs - Introduction]]\n- [[Querying and Analysis for HR Database Project - Introduction]]\n\nModule Two:\n- [[Entity Relationship Diagrams - Introduction]]\n\nModule Three:","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Select-and-Filter-Data-Creating-a-Database":{"title":"Select and Filter Data - Creating a Database","content":"# Select and Filter Data - Creating a Database\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=03277e59-0052-4bd5-afbe-b08f01438c9e\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nBack: [[Select and Filter Data - Introduction]] | Next: [[Select and Filter Data - Running Scripts]]\n","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Select-and-Filter-Data-Introduction":{"title":"Select and Filter Data - Introduction","content":"# Select and Filter Data - Introduction\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=099d37f5-9a86-4ea6-95b8-b0f20177b4ed\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nIn this section, we'll cover key SQL concepts to help you retrieve, filter and sort the information in your databases. We will cover using the SELECT statement to pick out the specific columns we're interested in. We'll learn to filter which rows we get using the WHERE clause and explore more some of the logic that can help us find exactly what we're looking for. Last, we'll understand how to sort our data using the ORDER BY clause.\n\nAs you progress through the lessons, make sure to solve the practice questions in your own database. Be sure to save all your queries to a file on your computer. You will need to submit them as part of your weekly assignment.\n\nBefore getting started you'll want to make sure that you have a text or code editor installed. You will need this to write SQL scripts. I'd recommend \u003ca href=\"https://code.visualstudio.com/\" target=\"_blank\"\u003eVisual Studio Code\u003c/a\u003e but you can use whatever software you'd like.\n\nNext: [[Select and Filter Data - Creating a Database]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Select-and-Filter-Data-Logical-Operators":{"title":"Select and Filter Data - Logical Operators","content":"# Select and Filter Data - Logical Operators\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1d1412b2-7cca-43cf-af61-b0f20177942c\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nLogical operators are essential in SQL for combining multiple conditions in the WHERE clause and adding flexibility to your queries. With the right operators, you can filter for rows based on any combination of attributes and conditions.\n\nSome of the most commonly used logical operators used in SQL are:\n- `AND`: Returns true if both conditions are true.\n- `OR`: Returns true if at least one of the conditions is true.\n- `NOT`: Negates the condition, returning true if the condition is false.\n- `BETWEEN`: Returns true if a value lies within a specified range.\n- `IN`: Returns true if a value matches any value in a list.\n- `LIKE`: Returns true if a value matches a specified pattern.\n\nExpanding on the `Employees` table from our previous examples:\n\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 1 | John Doe | 28 | Marketing |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n| 4 | Sara Ali | 30 | Finance |\n| 5 | Mia Chen | 26 | Marketing |\n\nTo find employees over 30 years old in the IT department we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Age \u003e 30 AND Department = 'IT';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|3|Alex Ray|45|IT|\n\nAs 'Alex Ray' is the only employee who matches both criteria.\n\nAlternatively if we wanted to find employees who are either in the 'HR' departments OR over 30 years old we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Age \u003e 30 OR Department = 'IT';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|2|Jane Doe|32|HR|\n|3|Alex Ray|45|IT|\n\nBecause while 'Jane Doe' is not in the 'IT' department, she is older than 30 and only one condition needs to be met.\n\nTo find all employees who are between the ages of 20 and 30 we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Age BETWEEN 20 AND 30;\n```\n##### Expected Output: \n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 1 | John Doe | 28 | Marketing |\n| 4 | Sara Ali | 30 | Finance |\n| 5 | Mia Chen | 26 | Marketing |\n\nThis time the expected output includes Sara Ali because `BETWEEN` is inclusive meaning we'll also get employees who are equal to the thresholds.\n\nTo find employees who work in either 'Marketing', 'Finance', or 'IT' departments we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Department IN ('Marketing', 'Finance', 'IT');\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n|5|Mia Chen|26|Marketing|\n\nThe `LIKE` command is slightly more complicated. It can be used to find values that match a particular pattern a pattern. For example if we wanted to find employees whose names started the letter 'J' we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Name LIKE 'J%';\n```\n##### Expected Output:\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 1 | John Doe | 28 | Marketing |\n| 2 | Jane Doe | 32 | HR |\n\nThe `%` symbol after the 'J' is a wildcard that represents zero, one, or multiple characters. So this pattern is looking for Names that start with a 'J' followed by any number of any characters (or none at all).\n\n`Like` can allow you to match any pattern with the right wildcards. See \u003ca href=\"https://www.w3schools.com/sql/sql_wildcards.asp\" target=\"_blank\"\u003eSQL Wildcard Characters (w3schools.com)\u003c/a\u003e for more information on Wildcards.\n\n# Practice Questions\n\n4. Write a query to select all customers who are from 'Berlin', 'London', 'Vancouver', 'São Paulo' or 'Madrid'.\n\n5. Write a query to select all customers who are not from 'Germany' and whose contact ages are under 60 years old.\n\n6. Write a query to select all customers whose contact ages are between 25 and 35 and whose contact name starts with an 'Al'.\n\nBack: [[Select and Filter Data - WHERE Clause and Comparison Operators]] | Next: [[Select and Filter Data - ORDER BY]]\n","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Select-and-Filter-Data-Note-on-Semicolons":{"title":"Select and Filter Data - Note on Semicolons","content":"# Select and Filter Data - Note on Semicolons\n\n### Why use semicolons?\n\nSo far we've only been executing a single query at a time but we could run more. A single query does not generally require a semicolon. However when you have multiple SQL statements in a script a semicolon is used to separate each statement. This prevents confusion for SQL about where one statement ends and the next begins.\n\nUsing semicolons is considered a best practice even when they are not strictly required and I will be expecting you to use them in your work for this course.\n\nBack: [[Select and Filter Data - SQL Comments]] | Next: [[Select and Filter Data - Practice Assignment]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Select-and-Filter-Data-ORDER-BY":{"title":"Select and Filter Data - ORDER BY","content":"# Select and Filter Data - ORDER BY\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=1304790b-0894-4c02-90b6-b0f2017793fc\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nThe `ORDER BY` clause is used to sort the result set of a query by one or more columns. It can sort the data in ascending or descending order. By default, it sorts in ascending order. \n\n`ORDER BY` must come after the WHERE clause. This makes sense if we think about it, we do not want to sort the rows until we've already filtered out the ones we don't want.\n\nUsing the `Employees` table from the previous example:\n\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|2|Jane Doe|32|HR|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n|5|Mia Chen|26|Marketing|\n\nWe can sort the results by columns such as age with:\n\n```sql\nSELECT * FROM Employees\nORDER BY Age;\n```\n##### Expected Output\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 5 | Mia Chen | 26 | Marketing |\n| 1 | John Doe | 28 | Marketing |\n| 4 | Sara Ali | 30 | Finance |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n\nIf we instead wrote:\n\n```sql\nSELECT * FROM Employees\nORDER BY Age DESC;\n```\n\nWe would get the same list but sorted from the highest to lowest age.\n\nIt is also possible to `ORDER BY` multiple columns:\n\n```sql\nSELECT * FROM Employees\nORDER BY Department, Age;\n```\n##### Expected Output:\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 4 | Sara Ali | 30 | Finance |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n| 5 | Mia Chen | 26 | Marketing |\n| 1 | John Doe | 28 | Marketing |\n\nIn this ordered list, employees are sorted by their departments ('Finance', 'HR', 'IT', and 'Marketing'), and within each department, they are sorted by their age from youngest to oldest.\n\n# Practice Questions\n\n7. Write a query to select all customers and order them alphabetically by the customer name.\n\n8. Write a query to select all customers and order them by their Ids from highest to lowest.\n\nBack: [[Select and Filter Data - Logical Operators]] | Next: [[Select and Filter Data - SQL Comments]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Select-and-Filter-Data-Practice-Assignment":{"title":"Select and Filter Data - Practice Assignment","content":"# Select and Filter Data - Practice Assignment\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=301026b3-0fb6-4a0b-abc9-b0f2017793d2\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nIn addition to the practice problems from the lesson pages, write queries to do the following:\n\n9. Select customers who are not from 'Berlin' or 'London' and are younger than 50. Order the results by age in descending order.\n\n10. Select customers whose customer name starts with an 'L' or an 'M'. Order the results by Id in descending order.\n\n### Submission Instructions\n\nPlease put all SQL queries for the practice questions into a single SQL file. Use comments to label each query with its respective question number. Submit this .sql file for your assignment on Canvas.\n\nBack: [[Select and Filter Data - Note on Semicolons]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Select-and-Filter-Data-Running-Scripts":{"title":"Select and Filter Data - Running Scripts","content":"# Select and Filter Data - Running Scripts\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=3b6bc768-5330-4f2b-9f42-b0f20177a502\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nTo get started with hands-on practice, you'll need data to populate your database. We'll do this by running a SQL script. Follow these steps to execute the script on your database:\n\n1. **Open the SQL File**:\n    - Open the script file \u003ca href=\"https://github.com/kellerflint/Class-Intro-SQL/blob/hugo/content/Files/CustomerScript.sql\" target=\"_blank\"\u003eCustomerScript.sql (github.com)\u003c/a\u003e. It contains the commands to create tables and insert data into them.\n2. **Access phpMyAdmin**:\n    - From the WebHostingForStudents Client Area, find your website and click the \"Log in to cPanel\" button.\n    - Once in cPanel, click \"phpMyAdmin\" under the \"Databases\" section.\n3. **Connect to Your Database**:\n    - Make sure you're connected to the database that you want to run the script on. In this case, it will be the database you created for this class. In phpMyAdmin you can select the database by clicking on its name on the left side of the screen.\n4. **Run the Script**:\n    - To run SQL code, click the \"SQL\" tab in the horizontal menu at the top of the screen.\n    - Copy over the entire contents of the SQL script into the editor. \n    - Click the \"Go\" button at the bottom right. This will create the tables defined in the script and populate them with data.\n5. **Verify the Data**:\n    - After running the script, check to ensure that tables are created and data is inserted. You can do this by running a simple SELECT query, like `SELECT * FROM tablename;.\n\nBack: [[Select and Filter Data - Creating a Database]] | Next: [[Select and Filter Data - SELECT Statement]] ","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Select-and-Filter-Data-SELECT-Statement":{"title":"Select and Filter Data - SELECT Statement","content":"# Select and Filter Data - SELECT Statement\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=aa477a38-2f05-4bf1-9aaf-b0f201779f3c\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## Database Basics Refresher\n\nDatabases exist to help us store and manage large amounts of information in an organized way. In SQL this data is organized into tables consisting of rows and columns. Each table in a database represents a different entity, such as customers, products, or orders. The rows in the table represent individual records, and the columns represent the attributes of these entities.\n##### Example Table: Customers\n| CustomerID | FirstName | LastName | Email               |\n|------------|-----------|----------|---------------------|\n| 1          | John      | Doe      | johndoe@email.com   |\n| 2          | Jane      | Smith    | janesmith@email.com |\n| 3          | Alex      | Johnson  | alexj@email.com     |\n\n## SELECT Statements\n\nThe `SELECT` statement is used to retrieve data from a database. It allows you to specify exactly which data you want to fetch from a table.\n\n##### Basic SELECT Syntax\n\n```sql\nSELECT column1, column2, ...\nFROM table_name;\n```\n\n##### Selecting Specific Columns\n\nTo retrieve specific columns from a table, list the column names separated by commas. For example the query:\n\n```sql\nSELECT FirstName, LastName\nFROM Customers;\n```\n##### Expected Output:\n| FirstName | LastName |\n| ---- | ---- |\n| John | Doe |\n| Jane | Smith |\n| Alex | Johnson |\n##### Selecting All Columns\n\nTo select all columns from a table, use the asterisk `*` symbol:\n\n```sql\nSELECT *\nFROM Customers;\n```\n\nThis query will result in the entire Customers table being displayed.\n\n# Practice Questions\n\n1. Select only the contact's name and age columns from the Customer table.\n\nBack: [[Select and Filter Data - Running Scripts]] | Next: [[Select and Filter Data - WHERE Clause and Comparison Operators]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Select-and-Filter-Data-SQL-Comments":{"title":"Select and Filter Data - SQL Comments","content":"# Select and Filter Data - SQL Comments\n\nComments in SQL are used to explain sections of SQL statements, or to prevent execution of SQL statements. They are helpful for documentation purposes and making code more readable.\n\n## Types of Comments:\n\n#### Single-Line Comments\n\n```sql\n-- This is a single-line comment\nSELECT * FROM Employees;\n```\n#### Multi-Line Comments:\n\n```sql\n/* This is a multi-line comment\n   that covers multiple lines */\nSELECT * FROM Employees;\n\n```\n\nComments are a crucial part of writing maintainable, understandable SQL code, especially in complex queries or when working in teams. They allow you to explain why a certain SQL statement is used, or to temporarily disable parts of SQL code during testing and development.\n\nBack: [[Select and Filter Data - ORDER BY]] | Next: [[Select and Filter Data - Note on Semicolons]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Select-and-Filter-Data-WHERE-Clause-and-Comparison-Operators":{"title":"Select and Filter Data - WHERE Clause and Comparison Operators","content":"# Select and Filter Data - WHERE Clause and Comparison Operators\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=10ae282e-3ce2-4f40-81b7-b0f201779467\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nThe WHERE clause in SQL is used to filter records from a table, returning only those that meet a specific condition. \n### Basics of the WHERE Clause \n\nThe WHERE clause follows the syntax: \n\n```sql\nSELECT column1, column2, ... FROM table_name \nWHERE condition;\n```\n\n### Comparison Operators\n\nThere are many different types of operators that can be used in our condition to filter what rows we get back based on the data they contain.\n\nThe first type are the comparison operators. These are used to compare values in a column with other values or expressions. These include:\n- `=` : Equal to\n- `\u003c` `\u003e` or `!` `=` : Not equal to\n- `\u003e` : Greater than\n- `\u003c` : Less than\n- `\u003e` `=` : Greater than or equal to\n- `\u003c` `=` : Less than or equal to\n\nFor example, assume we have a table `Employees` with the following data:\n\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|2|Jane Doe|32|HR|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n\nTo get details of employees from the 'Marketing' department we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Department = 'Marketing';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n\nIf we wanted to find all employees who are not in the 'HR' department we could write:\n\n```sql\nSELECT * FROM Employees\nWHERE Department \u003c\u003e 'HR';\n```\n##### Expected Output:\n|EmployeeID|Name|Age|Department|\n|---|---|---|---|\n|1|John Doe|28|Marketing|\n|3|Alex Ray|45|IT|\n|4|Sara Ali|30|Finance|\n\nIf we wanted to see information for employees over the age of 30 we could write:\n\n```sql\nSELECT * FROM Employees \nWHERE Age \u003e 30;\n```\n##### Expected Output:\n| EmployeeID | Name | Age | Department |\n| ---- | ---- | ---- | ---- |\n| 2 | Jane Doe | 32 | HR |\n| 3 | Alex Ray | 45 | IT |\n# Practice Questions\n\n2. Write a query to select all customers who are from 'Germany'.\n\n3. Write a query to select all customers whose contact age is less than or equal to 20.\n\nBack: [[Select and Filter Data - SELECT Statement]] | Next: [[Select and Filter Data - Logical Operators]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Table-JOINs-DROP-Tables":{"title":"Table JOINs - DROP Tables","content":"\n# Table JOINs - DROP Tables\n\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=d3ae98bb-32d4-4e55-b179-b0fb000eabf2\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## DROP Tables\n\nThe `DROP` command in SQL is used to remove objects from the database. It's a powerful command that can permanently delete tables, databases, views, or indexes. For the time being, we're just interested in using it to remove tables.\n\n```sql\nDROP TABLE tableName; -- Where tableName is the name of the table you want to drop\n```\n\nThe `DROP` command is typically used during database cleanup, restructuring, or when you need to remove test tables or obsolete database objects. It's part of the standard housekeeping tasks a database engineer or administrator might perform.\n\nA few important things to keep in mind when using `DROP`:\n- **Irreversible**: The `DROP` command is irreversible, meaning once you execute it, you can't undo the operation or recover the dropped data unless you have a backup.\n- **Use with Caution**: Given its permanent nature, it should be used with caution. Always ensure you have a backup or are absolutely certain you no longer need the data you're removing.\n- **Permissions**: You need appropriate permissions to execute a `DROP` command on database objects. You have these permission on your databases but in the real world you may not.\n\n\n\nBack: [[Table JOINs - Introduction]] | Next: [[Table JOINs - Magic Store Database Overview]]\n","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Table-JOINs-Filter-and-Sort-with-JOINs":{"title":"Table JOINs - Filter and Sort with JOINs","content":"# Table JOINs - Filter and Sort with JOINs\n\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=68a81ea3-08b4-42c1-8467-b0fb000ebe38\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## Using WHERE and ORDER BY with JOINs\n\nWe can still utilize the clauses from previous lessons to filter and sort on joined data. \n\nFor this example, we'll use the `Authors` and `Books` tables with a one-to-many relationship. Each author can write multiple books, but each book has only one author.\n### Authors Table:\n|AuthorID|AuthorName|\n|---|---|\n|1|J.K. Rowling|\n|2|George Orwell|\n|3|Leo Tolstoy|\n### Books Table:\n| BookID | Title | AuthorID |\n| ---- | ---- | ---- |\n| 101 | Harry Potter | 1 |\n| 102 | 1984 | 2 |\n| 103 | Animal Farm | 2 |\n| 104 | War and Peace | 3 |\n| 105 | Anna Karenina | 3 |\n### SQL JOIN with Filter and Sort\n\nCreate a query that joins these tables and:\n1. Filters to show only books written by a specific author (e.g., George Orwell).\n2. Sorts the results by the book's title.\n\n```sql\nSELECT Books.Title, Authors.AuthorName FROM Books\nJOIN Authors ON Books.AuthorID = Authors.AuthorID\nWHERE Authors.AuthorName = 'George Orwell'\nORDER BY Books.Title;\n\n```\n##### Expected Output:\n|Title|AuthorName|\n|---|---|\n|Anna Karenina|Leo Tolstoy|\n|War and Peace|Leo Tolstoy|\n### Explanation:\n\n1. **SELECT Clause**: Retrieves the book titles and their corresponding author names.\n2. **JOIN Operation**: Joins the `Books` and `Authors` tables using the `AuthorID` as the common field.\n3. **WHERE Clause**: Filters the results to include only those books written by 'Leo Tolstoy'.\n4. **ORDER BY Clause**: Sorts the resulting list of books by their titles in ascending order.\n\n`JOIN` must come before our `WHERE` and `ORDER BY` clauses because we need to have access to both the `AuthorName` and `Title` in order to filter and sort them.\n\n# Practice Questions\n\n4. **Display All Products from a Specific Supplier:** Create a query to list all products supplied by 'Enchanted Wares Ltd.' including the supplier name along with the product names and prices. Sort the results by product name (Z to A).\n\n5. **Display Products Ordered in December 2021:** Show all products ordered in December 2021, including the product name, the order date and the order ID. Sort the results by product name (A to Z).\n\t*Hint: You can compare dates strings like numbers! For example `WHERE Date \u003e '2021-12-01'` would return only rows where the `Date` was more recent than December 1st, 2021.*\n\n\n\nBack: [[Table JOINs - JOIN Tables with Many-to-Many Relationships]] | Next: [[Table JOINs - Table Aliasing]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Table-JOINs-Introduction":{"title":"Table JOINs - Introduction","content":"# Table JOINs - Introduction\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=de230526-3b5f-4f66-b8b5-b0fb000eac18\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\nIn this section, we will:\n- Interact with databases that have multiple related tables.\n- Discuss the different types of relationships tables can have with each other and how these relationships shape the way we retrieve and interpret data. \n- Explore the commands used to combine information from different tables, filter it based on specific criteria, and order it to get the results we want.\n\n\n\nNext: [[Table JOINs - DROP Tables]]\n","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Table-JOINs-JOIN-Tables-with-Many-to-Many-Relationships":{"title":"Table JOINs - JOIN Tables with Many-to-Many Relationships","content":"# Table JOINs - JOIN Tables with Many-to-Many Relationships\n\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=c59e6ff3-602a-4508-9a6f-b0fb000ebc41\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## Understanding JOINs in Many-to-Many Relationships\n\nGiven our bookstore database example from the previous lesson:\n### Authors Table:\n|AuthorID|AuthorName|\n|---|---|\n|1|Luna Bellatrix|\n|2|Orion Stardust|\n|3|Celeste Moon |\n### Books Table:\n|BookID|Title|\n|---|---|\n|101|Whispers of the Galaxy|\n|102|Secrets of the Eclipse|\n|103|Shadows in the Cosmos|\n|104|Starlight Symphony|\n|105|Moonlit Myth|\n### BooksAuthors Joining Table:\n|BookID|AuthorID|\n|---|---|\n|101|1|\n|102|2|\n|103|2|\n|103|1|\n|104|3|\n|105|3|\n\nTo retrieve data that spans across these three tables, we use the SQL JOIN operation twice. Let's see how we can use the JOIN command to fetch the list of books along with their authors' names now that we're representing the data with a many-to-many relationship.\n\n### Understanding the Many to Many Relationship\n\n```sql\nSELECT Books.Title, Authors.AuthorName FROM Books\nJOIN BooksAuthors ON Books.BookID = BooksAuthors.BookID\nJOIN Authors ON BooksAuthors.AuthorID = Authors.AuthorID;\n```\n##### Expected Output:\n|Title|AuthorName|\n|---|---|\n|Whispers of the Galaxy|Luna Bellatrix|\n|Secrets of the Eclipse|Orion Stardust|\n|Shadows in the Cosmos|Orion Stardust|\n|Shadows in the Cosmos|Luna Bellatrix|\n|Starlight Symphony|Celeste Moon |\n|Moonlit Myth|Celeste Moon |\n#### 1. `SELECT Books.Title, Authors.AuthorName FROM Books`\n- This command retrieves the `Title` from the `Books` table and the `AuthorName` from the `Authors` table to display book titles alongside their authors' names.\n- It also sets `Books` as the table from which the query starts, establishing the context for the JOIN operations that follow.\n\n#### 2. `JOIN BooksAuthors ON Books.BookID = BooksAuthors.BookID`\n- The first JOIN operation. It joins the `Books` table with the `BooksAuthors` joining table, based on the `BookID`. This operation matches each book with its corresponding entries in the `BooksAuthors` table.\n\n#### 3. `JOIN Authors ON BooksAuthors.AuthorID = Authors.AuthorID`\n- The second JOIN operation. It joins the intermediate result (which includes the information from `Books` and `BooksAuthors`) with the `Authors` table. The join is based on the `AuthorID`, linking each entry in the BooksAuthors table with its respective author.\n\n# Practice Questions\n\n3. **Display Order Details with Product Names:** Write a query to display details of each order, including the order ID, the date it was placed, and the names of the products in the order.\n\n\n\nBack: [[Table JOINs - Many-to-Many Relationships]] | Next: [[Table JOINs - Filter and Sort with JOINs]]\n","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Table-JOINs-JOIN-Tables-with-One-to-Many-Relationships":{"title":"Table JOINs - JOIN Tables with One-to-Many Relationships","content":"\n# Table JOINs - JOIN Tables with One-to-Many Relationships\n\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=851a0a62-1d48-4d30-9bff-b0fb000eb927\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## Understanding JOINs in One-to-Many Relationships\n\nGiven our bookstore database example from the previous lesson:\n### Authors Table:\n| AuthorID | AuthorName |\n| ---- | ---- |\n| 1 | J.K. Rowling |\n| 2 | George Orwell |\n| 3 | Leo Tolstoy |\n### Books Table:\n|BookID|Title|AuthorID|\n|---|---|---|\n|101|Harry Potter|1|\n|102|1984|2|\n|103|Animal Farm|2|\n|104|War and Peace|3|\n|105|Anna Karenina|3|\n\nIn order to retrieve data that spans across these two tables, we use the SQL JOIN operation. Let's see how we can use the JOIN command to fetch the list of books along with their authors' names.\n\n```sql\nSELECT Books.Title, Authors.AuthorName FROM Books\nJOIN Authors ON Books.AuthorID = Authors.AuthorID; \n```\n##### Expected Output:\n| Title | AuthorName |\n| ---- | ---- |\n| Harry Potter | J.K. Rowling |\n| 1984 | George Orwell |\n| Animal Farm | George Orwell |\n| War and Peace | Leo Tolstoy |\n| Anna Karenina | Leo Tolstoy |\n\nThis query effectively combines data from the `Books` and `Authors` tables by linking books to their respective authors by the AuthorID. The `JOIN` operation, facilitated by the `ON` clause, ensures that each book is matched with its author. The selected columns `Books.Title` and `Authors.AuthorName` are displayed in the resulting output.\n\nTo understand exactly how the SQL JOIN command works in our Authors and Books example, let's break down the query piece by piece.\n#### 1. `SELECT Books.Title, Authors.AuthorName`\n- **Purpose**: This part of the query specifies what data we want to retrieve. Here, we are asking for the `Title` from the `Books` table and the `AuthorName` from the `Authors` table.\n- **Action**: It tells the database to look at these two columns and prepare to output data from them.\n#### 2. `FROM Books`\n- **Purpose**: This clause specifies the table from which to retrieve data, which in this case is the `Books` table.\n- **Action**: It sets the context for the SQL query, indicating that the data will be selected from the `Books` table.\n#### 3. `JOIN Authors`\n- **Purpose**: Indicates that we want to combine rows from our existing table(s) (e.g., the `Books` table in this case) with rows from the `Authors` table.\n- **Action**: It initiates the action to combine data from the two tables based on a related column.\n#### 4. `ON Books.AuthorID = Authors.AuthorID`\n- **Purpose**: This is the condition on which the JOIN will be performed. To function, the JOIN needs to know what column it should use to match records between the two tables. `ON` is used to map this relationship. In this case, we are joining the tables based on the `AuthorID` column, which is common to both tables.\n- **Action**: It matches each row in the `Books` table with the corresponding row in the `Authors` table where the `AuthorID` is the same.\n\n# Practice Questions\n\n1. **List all Orders with Client Details:** Write a query to list all orders, including the order ID, the date the order was placed, and the first and last name of the client who placed the order.\n\n2. **List All Products with Supplier Information:** Write a query to display a list of all products, including their name, price, and the name and address of their supplier.\n\n\n\nBack: [[Table JOINs - One-to-Many Relationships]] | Next: [[Table JOINs - Many-to-Many Relationships]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Table-JOINs-Magic-Store-Database-Overview":{"title":"Table JOINs - Magic Store Database Overview","content":"\n# Table JOINs - Magic Store Database Overview\n\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=ff2760b3-299f-459d-853e-b0fb000eac4a\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## Initialize the Magic Store Database\n\n- DROP the tables from your previous assignment(s), if necessary\n- Run the following script to populate your database -\u003e \u003ca href=\"https://github.com/kellerflint/Class-Intro-SQL/blob/hugo/content/Files/MagicStoreScript.sql\" target=\"_blank\"\u003eMagicStoreScript (github.com)\u003c/a\u003e\n\n## Magic Store Database Overview\n\n**You may not understand all the details of these tables yet. Don't worry!** We're about to go through it all in detail in the next few lessons. For now, here's a quick overview you can reference back to as needed when working on the practice questions for this section.\n\nThe Magic Store Database contains the records of a store that sells potions, ingredients and enchanted items to witches and wizards across the world. These tables are structured to handle a typical e-commerce scenario, where clients place orders for products, and each order can contain multiple products. The `OrderProduct` table is a joining table that manages the many-to-many relationship between orders and products.\n\n##### 1. `Supplier` Table:\n- `ID`: Unique identifier for each supplier.\n- `Name`: Name of the supplier.\n- `Address`: Physical address of the supplier.\n- `PhoneNumber`: Contact phone number of the supplier.\n##### 2. `Product` Table:\n- `ID`: Unique identifier for each product.\n- `Name`: Name of the product.\n- `Price`: Price of the product.\n##### 3. `Client` Table:\n- `ID`: Unique identifier for each client.\n- `FirstName`: First name of the client.\n- `LastName`: Last name of the client.\n- `AccountCreated`: The date when the client's account was created.\n##### 4. `Order` Table:\n- `ID`: Unique identifier for each order.\n- `OrderedOn`: The date when the order was placed.\n- `ClientID`: Identifies the client who placed the order.\n##### 5. `OrderProduct` Table:\n- `OrderID`: Identifies the order. It is linked to the `Order` table.\n- `ProductID`: Identifies the product. It is linked to the `Product` table.\n- `Quantity`: How many of each product are included in an order.\n\n\n\n\nBack: [[Table JOINs - DROP Tables]] | Next: [[Table JOINs - One-to-Many Relationships]]\n","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Table-JOINs-Many-to-Many-Relationships":{"title":"Table JOINs - Many-to-Many Relationships","content":"# Table JOINs - Many-to-Many Relationships\n\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=c5b32412-9c53-4db8-a649-b0fb000ed371\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## Introduction to Many-to-Many Relationships\n\nA many-to-many relationship in databases occurs when multiple records in one table are associated with multiple records in another table. This kind of relationship often requires a third table, known as a junction, associative or joining table (depending on who you ask). For this class, I will use the term joining table. The joining table is used to break a many-to-many relationship down into two one-to-many relationships.\n\nLet's explore this concept with a new set of tables for books and authors that represent a many-to-many relationship.\n\n### Authors Table:\n|AuthorID|AuthorName|\n|---|---|\n|1|Luna Bellatrix|\n|2|Orion Stardust|\n|3|Celeste Moon |\n### Books Table:\n|BookID|Title|\n|---|---|\n|101|Whispers of the Galaxy|\n|102|Secrets of the Eclipse|\n|103|Shadows in the Cosmos|\n|104|Starlight Symphony|\n|105|Moonlit Myth|\n### BooksAuthors Joining Table:\n|BookID|AuthorID|\n|---|---|\n|101|1|\n|102|2|\n|103|2|\n|103|1|\n|104|3|\n|105|3|\n\nIn the `BooksAuthors` table, both `BookID` and `AuthorID` are used together to create unique combinations, allowing for the representation of multiple authors per book and vice versa.\n\n### Understanding the many-to-many Relationship\n\n1. **First One-to-Many**: Each record in the `Authors` table can be linked to multiple records in the `BooksAuthors` table. For example, AuthorID 2 is linked to BookID 102 and 103. This is a one-to-many relationship from Authors to BooksAuthors.\n\n2. **Second One-to-Many**: Similarly, each record in the `Books` table can be linked to multiple records in the `BooksAuthors` table. For instance, BookID 103 is linked to AuthorID 1 and 2. This is another one-to-many relationship, but from Books to BooksAuthors.\n\n3. **The Many-to-Many**: These two one-to-many relationships combine to form a many-to-many relationship. An author can write multiple books, and a book can be written by multiple authors. The `BooksAuthors` table serves as a bridge, linking each book to one or more authors and each author to one or more books.\n\n\n\nBack: [[Table JOINs - JOIN Tables with One-to-Many Relationships]] | Next: [[Table JOINs - JOIN Tables with Many-to-Many Relationships]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Table-JOINs-One-to-Many-Relationships":{"title":"Table JOINs - One-to-Many Relationships","content":"# Introduction to One-to-Many Relationships\n\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=b1546239-e7ce-4a5d-9068-b0fb000eabca\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=b8901214-6404-4e52-9e50-b0fb000ee542\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## What is a One-to-Many Relationship?\n\nIn relational databases, a one-to-many relationship is the most fundamental type of relationship. This relationship exists when a record in one table can be associated with multiple records in another table.\n\nFor example, consider a database of a bookstore. Here, we have two tables: `Authors` and `Books`. An author can write multiple books, but each book is written by only one author. This is a classic one-to-many relationship.\n\n### Authors Table:\n|AuthorID|AuthorName|\n|---|---|\n|1|J.K. Rowling|\n|2|George Orwell|\n|3|Leo Tolstoy|\n### Books Table:\n|BookID|Title|AuthorID|\n|---|---|---|\n|101|Harry Potter|1|\n|102|1984|2|\n|103|Animal Farm|2|\n|104|War and Peace|3|\n|105|Anna Karenina|3|\n### Understanding the Direction of the Relationship\n\nIt's important to understand exactly why this is a one-to-many relationship. Why can we can have many books per author but only one author per book? The structure of the table tells us this is how the relationship must work. Here's how:\n\n- **Single Author, Multiple Books**: Each author in the `Authors` table can write multiple books. An author's ID can appear in many rows in the `Books` table. For instance, if \"George Orwell\" writes two books, his ID appears next to each of those books in the `Books` table. Therefore an author can have many books.\n\n- **Single Book, Single Author**: Conversely, each book in the `Books` table is associated with only one author. For each row in the `Books` table, there is only a place for one AuthorID. For example, \"1984\" can only be associated with one author, George Orwell.\n\n### Terminology: Primary Keys and Foreign Keys\n\n#### Primary Key\n- A primary key is a unique identifier assigned to each record in a table. It ensures that each record can be distinctly identified, meaning no two records can have the same primary key value. This key is essential for maintaining the uniqueness and integrity of the data within the table.\n- In the `Authors` table, `AuthorID` serves as the primary key. Each author has a unique `AuthorID` that distinguishes it from others.\n- In the `Books` table, the `BookID` serves as the primary key. Each book has a unique `BookID` that distinguishes it from others.\n#### Foreign Key\n- A foreign key is a field (or collection of fields) in one table that uniquely identifies a row of another table. Put simply, a foreign key is a reference to the primary key of another table. It establishes a link between tables, showing how records in one table relate to records in another.\n- In the `Books` table, `AuthorID` serves as a foreign key. It references the `AuthorID` from the `Authors` table.\n- This foreign key creates the link between each book and its author, establishing the one-to-many relationship.\n\nBack: [[Table JOINs - Magic Store Database Overview]] | Next: [[Table JOINs - JOIN Tables with One-to-Many Relationships]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Table-JOINs-Practice-Assignment":{"title":"Table JOINs - Practice Assignment","content":"\nIn addition to the practice problems from the lesson pages, write queries to do the following:\n\n7. **Show Products Ordered by a Client:** Write a query to list all products ordered by the client with the ID of 2. Show product names for orders made by this client.\n   \n8. **List All Products with Their Suppliers, Sorted by Supplier Name and Product Price:** Display a list of all products along with their supplier names. Sort the list first by the supplier's name in ascending order, and then by the product's price in descending order.\n\n9. **Show Orders Placed After a Specific Date:** Write a query to display orders placed after '2023-01-01', including order ID, product names, and order date. Sort the results by product name.\n\n10. **List All Orders for 'Elixir of Immortality':** Display all orders that include the 'Elixir of Immortality', showing the order ID and the date the order was placed. Show the most recent orders first.\n### Submission Instructions\n\nPlease put all SQL queries for the practice questions into a single SQL file. Use comments to label each query with its respective question number. Submit this .sql file for your assignment on Canvas.\n\n\n\nBack: [[Table JOINs - Table Aliasing]]","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/Table-JOINs-Table-Aliasing":{"title":"Table JOINs - Table Aliasing","content":"# Table JOINs - Table Aliasing\n\n\n\u003ciframe src=\"https://egator.hosted.panopto.com/Panopto/Pages/Embed.aspx?id=81bef28a-deff-41c0-9675-b0fb000ec500\u0026autoplay=false\u0026offerviewer=true\u0026showtitle=true\u0026showbrand=true\u0026captions=false\u0026interactivity=all\" height=\"405\" width=\"720\" style=\"border: 1px solid #464646;\" allowfullscreen allow=\"autoplay\" aria-label=\"Panopto Embedded Video Player\"\u003e\u003c/iframe\u003e\n\n## What is Table Aliasing?\n\nTable aliasing involves giving a table in your SQL query a temporary name. This temporary name (aka alias) is often an abbreviation of the full table name. This is particularly useful in queries involving multiple tables because it simplifies the query syntax and makes it easier to read and write.\n\n### Example Using Authors and Books\n\nLet's revisit the Authors and Books tables and see how table aliasing can be applied.\n### Authors Table\n|AuthorID|AuthorName|\n|---|---|\n|1|J.K. Rowling|\n|2|George Orwell|\n|3|Leo Tolstoy|\n### Books Table\n|BookID|Title|AuthorID|\n|---|---|---|\n|101|Harry Potter|1|\n|102|1984|2|\n|103|Animal Farm|2|\n|104|War and Peace|3|\n|105|Anna Karenina|3|\n\nHere's how we might perform a join to get the Titles and Authors using aliasing:\n\n```sql\nSELECT b.Title, a.AuthorName FROM Books b\nJOIN Authors a ON b.AuthorID = a.AuthorID;\n```\n### Explanation:\n\n1. **`Books b`**: Here, `Books` is aliased as `b`. This means that in the rest of the query, we can refer to the `Books` table as `b`.\n\n2. **`Authors a`**: Similarly, `Authors` is aliased as `a`. Any reference to the `Authors` table can now be made using `a`.\n\n3. **`b.Title, a.AuthorName`**: Instead of writing `Books.Title` and `Authors.AuthorName`, we use the aliases, making the query more concise.\n\n4. **`b.AuthorID = a.AuthorID`**: The JOIN condition uses the aliases as a stand in for the full table names as well.\n\n# Practice Questions\n\n6. **Rewrite Display Products Ordered in December 2023 Using Aliasing:** Copy your answer from #5. Rewrite it to show the same information but using table aliases wherever possible to make your code more concise.\n\n\n\nBack: [[Table JOINs - Filter and Sort with JOINs]] | Next: [[Table JOINs - Practice Assignment]]\n","lastmodified":"2024-02-14T00:48:09.072234096Z","tags":[]},"/UNLINKED-Entity-Relationship-Diagrams-Cardinality":{"title":"(UNLINKED) Entity Relationship Diagrams - Cardinality","content":"# Entity Relationship Diagrams - Cardinality\n\nVideo\n\nBack: [[Entity Relationship Diagrams - Creating Tables]] | Next: [[Entity Relationship Diagrams - Practice Assignment]]\n","lastmodified":"2024-02-14T00:48:09.068234094Z","tags":[]}}